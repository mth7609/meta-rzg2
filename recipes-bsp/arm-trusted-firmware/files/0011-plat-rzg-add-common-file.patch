From dee4afb61d41d63e8953aaf978ebdb66102c2d01 Mon Sep 17 00:00:00 2001
From: Hien Huynh <hien.huynh.px@renesas.com>
Date: Tue, 27 Oct 2020 15:35:40 +0700
Subject: [PATCH 11/18] plat: rzg: add common file

Refer from commits:
- "rcar_gen3: plat: Prevent PCIe hang during L1X config access"
- "rcar_gen3: console: Convert to multi-console API"

Signed-off-by: Hien Huynh <hien.huynh.px@renesas.com>
---
 plat/renesas/rzg/rzg_common.c | 104 ++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 104 insertions(+)
 create mode 100644 plat/renesas/rzg/rzg_common.c

diff --git a/plat/renesas/rzg/rzg_common.c b/plat/renesas/rzg/rzg_common.c
new file mode 100644
index 0000000..de3af8f
--- /dev/null
+++ b/plat/renesas/rzg/rzg_common.c
@@ -0,0 +1,104 @@
+/*
+ * Copyright (c) 2019, Renesas Electronics Corporation. All rights reserved.
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+
+#include <assert.h>
+
+#include <arch_helpers.h>
+#include <drivers/console.h>
+#include <lib/xlat_tables/xlat_mmu_helpers.h>
+#include <plat/common/platform.h>
+
+#include <lib/mmio.h>
+
+#define CPG_BASE		0xE6150000
+#define CPG_MSTPSR3		0x0048
+#define MSTP318			(1 << 18)
+#define MSTP319			(1 << 19)
+#define PMSR			0x5c
+#define PMSR_L1FAEG		(1U << 31)
+#define PMSR_PMEL1RX		(1 << 23)
+#define PMCTLR			0x60
+#define PMSR_L1IATN		(1U << 31)
+
+static int rzg_pcie_fixup(unsigned int controller)
+{
+	uint32_t rzg_pcie_base[] = { 0xfe011000, 0xee811000 };
+	uint32_t addr = rzg_pcie_base[controller];
+	uint32_t cpg, pmsr;
+	int ret = 0;
+
+	/* Test if PCIECx is enabled */
+	cpg = mmio_read_32(CPG_BASE + CPG_MSTPSR3);
+	if (cpg & (MSTP318 << !controller))
+		return ret;
+
+	pmsr = mmio_read_32(addr + PMSR);
+
+	if ((pmsr & PMSR_PMEL1RX) && ((pmsr & 0x70000) != 0x30000)) {
+		/* Fix applicable */
+		mmio_write_32(addr + PMCTLR, PMSR_L1IATN);
+		while (!(mmio_read_32(addr + PMSR) & PMSR_L1FAEG))
+			;
+		mmio_write_32(addr + PMSR, PMSR_L1FAEG | PMSR_PMEL1RX);
+		ret = 1;
+	}
+
+	return ret;
+}
+
+/* RAS functions common to AArch64 ARM platforms */
+void plat_ea_handler(unsigned int ea_reason, uint64_t syndrome, void *cookie,
+		void *handle, uint64_t flags)
+{
+	unsigned int fixed = 0;
+
+	fixed |= rzg_pcie_fixup(0);
+	fixed |= rzg_pcie_fixup(1);
+
+	if (fixed)
+		return;
+
+	ERROR("Unhandled External Abort received on 0x%lx at EL3!\n",
+			read_mpidr_el1());
+	ERROR(" exception reason=%u syndrome=0x%llx\n", ea_reason, syndrome);
+
+	panic();
+}
+
+#include <drivers/renesas/rzg/console/console.h>
+
+static console_t rzg_boot_console;
+static console_t rzg_runtime_console;
+
+void rzg_console_boot_init(void)
+{
+	int ret;
+
+	ret = console_rzg_register(0, 0, 0, &rzg_boot_console);
+	if (!ret)
+		panic();
+
+	console_set_scope(&rzg_boot_console, CONSOLE_FLAG_BOOT);
+}
+
+void rzg_console_boot_end(void)
+{
+}
+
+void rzg_console_runtime_init(void)
+{
+	int ret;
+
+	ret = console_rzg_register(1, 0, 0, &rzg_runtime_console);
+	if (!ret)
+		panic();
+
+	console_set_scope(&rzg_boot_console, CONSOLE_FLAG_RUNTIME);
+}
+
+void rzg_console_runtime_end(void)
+{
+}
-- 
2.7.4

