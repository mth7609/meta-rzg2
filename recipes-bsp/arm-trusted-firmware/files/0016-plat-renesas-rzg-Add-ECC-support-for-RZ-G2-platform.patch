From 72d2dd4b2746a656d17f3c8672df910d5d30e9c9 Mon Sep 17 00:00:00 2001
From: Hien Huynh <hien.huynh.px@renesas.com>
Date: Mon, 12 Oct 2020 16:46:35 +0700
Subject: [PATCH 16/18] plat: renesas: rzg: Add ECC support for RZ/G2 platform

This commit will add ECC support for all RZ/G2 platform:
- G2H: Single and Dual mode.
- G2M:
	+ v1.x: Dual mode.
	+ v3.0: Single and Dual mode.
- G2N: Single mode.
- G2E: Single mode.

Signed-off-by: Binh Nguyen <binh.nguyen.uw@renesas.com>
Signed-off-by: Huynh Thanh Hung <hung.huynh.wz@renesas.com>
Signed-off-by: Hien Huynh <hien.huynh.px@renesas.com>
---
 plat/renesas/rzg/bl2_fusa.c       | 348 ++++++++++++++++++++++++++++++++++++++
 plat/renesas/rzg/bl2_plat_setup.c |   6 +
 plat/renesas/rzg/platform.mk      |  23 +++
 3 files changed, 377 insertions(+)
 create mode 100644 plat/renesas/rzg/bl2_fusa.c

diff --git a/plat/renesas/rzg/bl2_fusa.c b/plat/renesas/rzg/bl2_fusa.c
new file mode 100644
index 0000000..aad75ef
--- /dev/null
+++ b/plat/renesas/rzg/bl2_fusa.c
@@ -0,0 +1,348 @@
+/*
+ * bl2_ecc_setup.c -
+ *
+ * Copyright (C) 2020 Renesas Electronics Corporation.
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+
+#include <common/debug.h>
+#include <lib/mmio.h>
+
+#if (RZG_DRAM_ECC == 1)
+#define MB(x)			((x) << 20)
+
+#define FUSA_DRAM_CLEAR		1
+
+#define	DFUSAAREACR		0xE6785000	/* DRAM FuSa Area Conf */
+#define	DECCAREACR		0xE6785040	/* DRAM ECC Area Conf */
+#define	NUM_DAREA		16
+#define	FUSACR			0xE6784020	/* FuSa Ctrl */
+
+#define	ADSPLCR0		0xE6784008	/* Address Split Control 0 */
+#define	ADSPLCR1		0xE678400C	/* Address Split Control 1 */
+#define	ADSPLCR2		0xE6784010	/* Address Split Control 2 */
+#define	ADSPLCR3		0xE6784014	/* Address Split Control 3 */
+
+/* As the saddr, specify high-memory address (> 4 GB) */
+#define	FUSAAREACR(en, size, saddr)	\
+	(((uint32_t)en << 31) | ((uint32_t)size << 24) | (uint32_t)(((uintptr_t)saddr) >> 12))
+#define	ECCAREACR(ecc, saddr) \
+	(((uint32_t)ecc << 31) | (uint32_t)(((uintptr_t)saddr) >> 12))
+
+#define	EFUSASEL(x)	((uint32_t)x & 0xff) << 24	/*Setting for Extra Split mode*/
+#define	DFUSASEL(x)	((uint32_t)x & 0xff) << 16	/*Setting for DRAM*/
+#define	SFUSASEL(x)	((uint32_t)x & 0x3f)		/*Setting for SRAM*/
+
+#define	SPLITSEL(x)	((uint32_t)x & 0xff) << 16	/*Setting for Split mode*/
+#define	AREA(x)		((uint32_t)x & 0x1f) << 8	/*address bit devides DBSC into 8 areas*/
+#define	SWP(x)		((uint32_t)x & 0x1f)		/*address bit to interleave DBSCs in split mode*/
+#define	ADRMODE(x)	((uint32_t)x & 0x1) << 31	/*Select address mapping mode*/
+
+#ifndef ARRAY_SIZE
+#define	ARRAY_SIZE(a)		(sizeof(a) / sizeof(a[0]))
+#endif
+
+#if (RZG_LSI == RZG_G2E)
+#define	FUSAAREA1			0x408000000
+#define	FUSAAREA1_TOTAL		MB(128+256+256+256+64)
+#define	ECCAREA1			0x444000000
+#define	ECCAREA1_TOTAL		MB(128+256+256+256+64)
+#endif /* (RZG_LSI == RZG_G2E) */
+
+#if (RZG_LSI == RZG_G2N)
+#define	FUSAAREA1		0x408000000
+#define	FUSAAREA1_TOTAL		MB(128+256+512+512+512+64)
+#define	ECCAREA1		0x484000000
+#define	ECCAREA1_TOTAL		MB(128+256+512+512+512+64)
+#endif /* (RZG_LSI == RZG_G2N) */
+
+#if (RZG_LSI == RZG_G2M)
+#if (RZG_DRAM_ECC_FULL == 1)
+#define	FUSAAREA1		0x408000000
+#define	FUSAAREA1_TOTAL		MB(1920)
+#define	ECCAREA1		0x608000000
+#define	ECCAREA1_TOTAL		MB(1920)
+#else
+#define	FUSAAREA1		0x408000000
+#define	FUSAAREA1_TOTAL		MB(960)
+#define	ECCAREA1		0x444000000
+#define	ECCAREA1_TOTAL		MB(960)
+
+#define	FUSAAREA2		0x600000000
+#define	FUSAAREA2_TOTAL		MB(1024)
+#define	ECCAREA2		0x640000000
+#define	ECCAREA2_TOTAL		MB(1024)
+#endif
+#endif /* (RZG_LSI == RZG_G2M) */
+
+#if (RZG_LSI == RZG_G2H)
+#if (RZG_DRAM_ECC_FULL == 1)
+#define	FUSAAREA1		0x408000000
+#define	FUSAAREA1_TOTAL		MB(1920)
+#define	ECCAREA1		0x608000000
+#define	ECCAREA1_TOTAL		MB(1920)
+#else
+#define	FUSAAREA1		0x408000000
+#define	FUSAAREA1_TOTAL		MB(960)
+#define	ECCAREA1		0x444000000
+#define	ECCAREA1_TOTAL		MB(960)
+
+#define	FUSAAREA2		0x600000000
+#define	FUSAAREA2_TOTAL		MB(1024)
+#define	ECCAREA2		0x640000000
+#define	ECCAREA2_TOTAL		MB(1024)
+#endif
+#endif /* (RZG_LSI == RZG_G2H) */
+
+struct rzg2_ecc_conf {
+	uint32_t fusaareacr;
+	uint32_t eccareacr;
+};
+
+#if (RZG_LSI == RZG_G2E)
+static const struct rzg2_ecc_conf rzg2_ek874_conf[] = {
+#if (RZG_DRAM_ECC_FULL == 2) /* ECC Full mode single channel */
+	{ FUSAAREACR(1, 7, 0x408000000),    ECCAREACR(0, 0x448000000)   }, /* 128+128 MB */
+	{ FUSAAREACR(1, 8, 0x410000000),    ECCAREACR(0, 0x450000000)   }, /* 256+256 MB */
+	{ FUSAAREACR(1, 8, 0x420000000),    ECCAREACR(0, 0x460000000)   }, /* 256+256 MB */
+	{ FUSAAREACR(1, 8, 0x430000000),    ECCAREACR(0, 0x470000000)   }, /* 256+256 MB */
+	{ FUSAAREACR(1, 6, 0x440000000),    ECCAREACR(0, 0x444000000)   }, /* 64+64 MB */
+#else /* (RZG_DRAM_ECC_FULL == 2) */
+	{ FUSAAREACR(0, 0, 0),    ECCAREACR(0, 0)   },
+	{ FUSAAREACR(0, 0, 0),    ECCAREACR(0, 0)   },
+	{ FUSAAREACR(0, 0, 0),    ECCAREACR(0, 0)   },
+	{ FUSAAREACR(0, 0, 0),    ECCAREACR(0, 0)   },
+	{ FUSAAREACR(0, 0, 0),    ECCAREACR(0, 0)   },
+#endif /* (RZG_DRAM_ECC_FULL == 2) */
+	{ FUSAAREACR(0, 0, 0),    ECCAREACR(0, 0)   },
+	{ FUSAAREACR(0, 0, 0),    ECCAREACR(0, 0)   },
+	{ FUSAAREACR(0, 0, 0),    ECCAREACR(0, 0)   },
+	{ FUSAAREACR(0, 0, 0),    ECCAREACR(0, 0)   },
+	{ FUSAAREACR(0, 0, 0),    ECCAREACR(0, 0)   },
+	{ FUSAAREACR(0, 0, 0),    ECCAREACR(0, 0)   },
+	{ FUSAAREACR(0, 0, 0),    ECCAREACR(0, 0)   },
+	{ FUSAAREACR(0, 0, 0),    ECCAREACR(0, 0)   },
+	{ FUSAAREACR(0, 0, 0),    ECCAREACR(0, 0)   },
+	{ FUSAAREACR(0, 0, 0),    ECCAREACR(0, 0)   },
+	{ FUSAAREACR(0, 0, 0),    ECCAREACR(0, 0)   },
+};
+#endif /* RZG_LSI == RZG_G2E */
+
+#if (RZG_LSI == RZG_G2N)
+static const struct rzg2_ecc_conf rzg2_hihope_rzg2n_conf[] = {
+#if (RZG_DRAM_ECC_FULL == 2) /* ECC Full mode single channel */
+	{ FUSAAREACR(1, 7, 0x408000000),    ECCAREACR(0, 0x498000000)   }, /* 128+128 MB */
+	{ FUSAAREACR(1, 9, 0x430000000),    ECCAREACR(0, 0x4A0000000)   }, /* 512+512 MB */
+	{ FUSAAREACR(1, 9, 0x450000000),    ECCAREACR(0, 0x4C0000000)   }, /* 512+512 MB */
+	{ FUSAAREACR(1, 9, 0x470000000),    ECCAREACR(0, 0x4E0000000)   }, /* 512+512 MB */
+	{ FUSAAREACR(1, 6, 0x490000000),    ECCAREACR(0, 0x494000000)   }, /* 64+64 MB */
+#else /* (RZG_DRAM_ECC_FULL == 2) */
+	{ FUSAAREACR(0, 0, 0),    ECCAREACR(0, 0)   },
+	{ FUSAAREACR(0, 0, 0),    ECCAREACR(0, 0)   },
+	{ FUSAAREACR(0, 0, 0),    ECCAREACR(0, 0)   },
+	{ FUSAAREACR(0, 0, 0),    ECCAREACR(0, 0)   },
+	{ FUSAAREACR(0, 0, 0),    ECCAREACR(0, 0)   },
+#endif /* (RZG_DRAM_ECC_FULL == 2) */
+	{ FUSAAREACR(0, 0, 0),    ECCAREACR(0, 0)   },
+	{ FUSAAREACR(0, 0, 0),    ECCAREACR(0, 0)   },
+	{ FUSAAREACR(0, 0, 0),    ECCAREACR(0, 0)   },
+	{ FUSAAREACR(0, 0, 0),    ECCAREACR(0, 0)   },
+	{ FUSAAREACR(0, 0, 0),    ECCAREACR(0, 0)   },
+	{ FUSAAREACR(0, 0, 0),    ECCAREACR(0, 0)   },
+	{ FUSAAREACR(0, 0, 0),    ECCAREACR(0, 0)   },
+	{ FUSAAREACR(0, 0, 0),    ECCAREACR(0, 0)   },
+	{ FUSAAREACR(0, 0, 0),    ECCAREACR(0, 0)   },
+	{ FUSAAREACR(0, 0, 0),    ECCAREACR(0, 0)   },
+	{ FUSAAREACR(0, 0, 0),    ECCAREACR(0, 0)   },
+};
+#endif /* RZG_LSI == RZG_G2N */
+
+#if (RZG_LSI == RZG_G2H)
+static const struct rzg2_ecc_conf rzg2_hihope_rzg2h_conf[] = {
+#if (RZG_DRAM_ECC_FULL == 2)   /* ECC Full mode single channel */
+	{ FUSAAREACR(1, 6, 0x450000000), ECCAREACR(0, 0x454000000) }, /* 64+64 MB */
+	{ FUSAAREACR(1, 7, 0x408000000), ECCAREACR(0, 0x458000000) }, /* 128+128 MB */
+	{ FUSAAREACR(1, 9, 0x430000000), ECCAREACR(0, 0x460000000) }, /* 512+512 MB */
+	{ FUSAAREACR(1, 9, 0x600000000), ECCAREACR(0, 0x640000000) }, /* 512+512 MB */
+	{ FUSAAREACR(1, 9, 0x620000000), ECCAREACR(0, 0x660000000) }, /* 512+512 MB */
+#else /* (RZG_DRAM_ECC_FULL == 2) */
+	{ FUSAAREACR(0, 0, 0), ECCAREACR(0, 0) },
+	{ FUSAAREACR(0, 0, 0), ECCAREACR(0, 0) },
+	{ FUSAAREACR(0, 0, 0), ECCAREACR(0, 0) },
+	{ FUSAAREACR(0, 0, 0), ECCAREACR(0, 0) },
+	{ FUSAAREACR(0, 0, 0), ECCAREACR(0, 0) },
+#endif /* (RZG_DRAM_ECC_FULL == 2 */
+	{ FUSAAREACR(0, 0, 0), ECCAREACR(0, 0) },
+	{ FUSAAREACR(0, 0, 0), ECCAREACR(0, 0) },
+	{ FUSAAREACR(0, 0, 0), ECCAREACR(0, 0) },
+	{ FUSAAREACR(0, 0, 0), ECCAREACR(0, 0) },
+	{ FUSAAREACR(0, 0, 0), ECCAREACR(0, 0) },
+	{ FUSAAREACR(0, 0, 0), ECCAREACR(0, 0) },
+	{ FUSAAREACR(0, 0, 0), ECCAREACR(0, 0) },
+	{ FUSAAREACR(0, 0, 0), ECCAREACR(0, 0) },
+	{ FUSAAREACR(0, 0, 0), ECCAREACR(0, 0) },
+	{ FUSAAREACR(0, 0, 0), ECCAREACR(0, 0) },
+	{ FUSAAREACR(0, 0, 0), ECCAREACR(0, 0) },
+};
+#endif /* RZG_LSI == RZG_G2H */
+
+#if (RZG_LSI == RZG_G2M)
+static const struct rzg2_ecc_conf rzg2_hihope_rzg2m_conf[] = {
+#if (RZG_DRAM_ECC_FULL == 2)   /* ECC Full mode single channel */
+	{ FUSAAREACR(1, 6, 0x450000000), ECCAREACR(0, 0x454000000) }, /* 64+64 MB */
+	{ FUSAAREACR(1, 7, 0x408000000), ECCAREACR(0, 0x458000000) }, /* 128+128 MB */
+	{ FUSAAREACR(1, 9, 0x430000000), ECCAREACR(0, 0x460000000) }, /* 512+512 MB */
+	{ FUSAAREACR(1, 9, 0x600000000), ECCAREACR(0, 0x640000000) }, /* 512+512 MB */
+	{ FUSAAREACR(1, 9, 0x620000000), ECCAREACR(0, 0x660000000) }, /* 512+512 MB */
+#else /* (RZG_DRAM_ECC_FULL == 2) */
+	{ FUSAAREACR(0, 0, 0), ECCAREACR(0, 0) },
+	{ FUSAAREACR(0, 0, 0), ECCAREACR(0, 0) },
+	{ FUSAAREACR(0, 0, 0), ECCAREACR(0, 0) },
+	{ FUSAAREACR(0, 0, 0), ECCAREACR(0, 0) },
+	{ FUSAAREACR(0, 0, 0), ECCAREACR(0, 0) },
+	{ FUSAAREACR(0, 0, 0), ECCAREACR(0, 0) },
+#endif /* (RZG_DRAM_ECC_FULL == 2) */
+	{ FUSAAREACR(0, 0, 0), ECCAREACR(0, 0) },
+	{ FUSAAREACR(0, 0, 0), ECCAREACR(0, 0) },
+	{ FUSAAREACR(0, 0, 0), ECCAREACR(0, 0) },
+	{ FUSAAREACR(0, 0, 0), ECCAREACR(0, 0) },
+	{ FUSAAREACR(0, 0, 0), ECCAREACR(0, 0) },
+	{ FUSAAREACR(0, 0, 0), ECCAREACR(0, 0) },
+	{ FUSAAREACR(0, 0, 0), ECCAREACR(0, 0) },
+	{ FUSAAREACR(0, 0, 0), ECCAREACR(0, 0) },
+	{ FUSAAREACR(0, 0, 0), ECCAREACR(0, 0) },
+	{ FUSAAREACR(0, 0, 0), ECCAREACR(0, 0) },
+	{ FUSAAREACR(0, 0, 0), ECCAREACR(0, 0) },
+};
+#endif /* RZG_LSI == RZG_G2M */
+
+#if (RZG_LSI == RZG_G2M || RZG_LSI == RZG_G2H)
+#if (RZG_DRAM_ECC_FULL == 1) /* ECC Full mode dual channel */
+static const uint32_t fusacr = EFUSASEL(0xF0) | DFUSASEL(0xF8)| SFUSASEL(0);
+static const uint32_t adsplcr0 = ADRMODE(0) | SPLITSEL(1) | AREA(0x1C) | SWP(0);
+static const uint32_t adsplcr1 = SPLITSEL(1) | AREA(0x1C) | SWP(0);
+static const uint32_t adsplcr2 = 0;
+static const uint32_t adsplcr3 = SPLITSEL(0) | AREA(0x19) | SWP(0);
+#else /* (RZG_DRAM_ECC_FULL == 1) */
+static const uint32_t fusacr = 0;
+static const uint32_t adsplcr0 = 0;
+static const uint32_t adsplcr1 = 0;
+static const uint32_t adsplcr2 = 0;
+static const uint32_t adsplcr3 = 0;
+#endif /* (RZG_DRAM_ECC_FULL == 1) */
+#endif /* (RZG_LSI == RZG_G2M || RZG_LSI == RZG_G2H) */
+
+#if ((FUSA_DRAM_CLEAR == 1) && (RZG_DRAM_ECC_FULL != 0))
+/* Write zero-valued octa-byte words */
+static void bzero64(uintptr_t start, uint64_t size)
+{
+	/* start should be aligned on word boundary, size should be multiple of 8 */
+	volatile uint64_t *ptr = (volatile uint64_t *)start;
+	volatile uint64_t *end = ptr + (size / sizeof(uint64_t));
+
+	while (ptr < end)
+		*ptr++ = 0;
+}
+#endif /* ((FUSA_DRAM_CLEAR == 1) && (RZG_DRAM_ECC_FULL != 0)) */
+
+#if (RZG_LSI == RZG_G2M || RZG_LSI == RZG_G2H)
+void bl2_ecc_dual_init()
+{
+#if ((FUSA_DRAM_CLEAR == 1) && (RZG_DRAM_ECC_FULL == 1))
+	/* Clear DRAM ECC Area (for check) */
+	NOTICE("BL2: Clearing ECC area from %lx\n", ECCAREA1);
+	bzero64(ECCAREA1, (uint64_t)ECCAREA1_TOTAL);
+#endif /*((FUSA_DRAM_CLEAR == 1) && (RZG_DRAM_ECC_FULL == 1)) */
+
+	mmio_write_32((uintptr_t)((uint32_t *)ADSPLCR0), adsplcr0);
+	mmio_write_32((uintptr_t)((uint32_t *)ADSPLCR1), adsplcr1);
+	mmio_write_32((uintptr_t)((uint32_t *)ADSPLCR2), adsplcr2);
+	mmio_write_32((uintptr_t)((uint32_t *)ADSPLCR3), adsplcr3);
+	mmio_write_32((uintptr_t)((uint32_t *)FUSACR),  fusacr);
+
+	NOTICE("BL2: DRAM ECC Configured:\n");
+	NOTICE("     ADSPLCR0=0x%x\n", adsplcr0);
+	NOTICE("     ADSPLCR1=0x%x\n", adsplcr1);
+	NOTICE("     ADSPLCR2=0x%x\n", adsplcr2);
+	NOTICE("     ADSPLCR3=0x%x\n", adsplcr3);
+	NOTICE("     FUSACR=0x%x\n", fusacr);
+
+#if ((FUSA_DRAM_CLEAR == 1) && (RZG_DRAM_ECC_FULL == 1))
+	/* Clear DRAM data area to initialize ECC area */
+	NOTICE("BL2: Clearing DATA area from %lx\n", FUSAAREA1);
+	bzero64(FUSAAREA1, (uint64_t)FUSAAREA1_TOTAL);
+#endif /* ((FUSA_DRAM_CLEAR == 1) && (RZG_DRAM_ECC_FULL == 1)) */
+}
+#endif /* (RZG_LSI == RZG_G2M || RZG_LSI == RZG_G2H) */
+
+void bl2_ecc_single_init(const struct rzg2_ecc_conf *conf, int nb_of_conf)
+{
+	int n;
+
+#if ((FUSA_DRAM_CLEAR == 1) && (RZG_DRAM_ECC_FULL == 2))
+	/* Clear DRAM ECC Area (for check) */
+	NOTICE("BL2: Clearing ECC area from %lx\n", ECCAREA1);
+	bzero64(ECCAREA1, (uint64_t)ECCAREA1_TOTAL);
+#if (defined (ECCAREA2) && defined (ECCAREA2_TOTAL))
+	NOTICE("BL2: Clearing ECC area from %lx\n", ECCAREA2);
+	bzero64(ECCAREA2, (uint64_t)ECCAREA2_TOTAL);
+#endif /* (defined (ECCAREA2) && defined (ECCAREA2_TOTAL)) */
+#endif /* ((FUSA_DRAM_CLEAR == 1) && (RZG_DRAM_ECC_FULL == 2)) */
+
+	for (n = 0; n < nb_of_conf; n++, conf++) {
+		mmio_write_32((uintptr_t)((uint32_t *)DFUSAAREACR + n),
+			      conf->fusaareacr);
+		mmio_write_32((uintptr_t)((uint32_t *)DECCAREACR + n),
+			      conf->eccareacr);
+		if(conf->fusaareacr & ((uint32_t) 1 << 31)) {
+			NOTICE("BL2: DRAM ECC area=%d, size=%d MB, \n",
+			       n, 1 << ((conf->fusaareacr >> 24) & 0xf));
+			NOTICE("\t FuSa=0x%x ECC=0x%x \n",
+			       conf->fusaareacr, conf->eccareacr);
+		}
+	}
+
+#if ((FUSA_DRAM_CLEAR == 1) && (RZG_DRAM_ECC_FULL == 2))
+	/* Clear DRAM data area to initialize ECC area */
+	NOTICE("BL2: Clearing DATA area from %lx\n", FUSAAREA1);
+	bzero64(FUSAAREA1, (uint64_t)FUSAAREA1_TOTAL);
+#if (defined (FUSAAREA2) && defined (FUSAAREA2_TOTAL))
+	NOTICE("BL2: Clearing DATA area from %lx\n", FUSAAREA2);
+	bzero64(FUSAAREA2, (uint64_t)FUSAAREA2_TOTAL);
+#endif /* (defined (FUSAAREA2) && defined (FUSAAREA2_TOTAL)) */
+#endif /* ((FUSA_DRAM_CLEAR == 1) && (RZG_DRAM_ECC_FULL == 2)) */
+}
+
+#endif /* (RZG_DRAM_ECC == 1) */
+
+void bl2_ecc_init(uint32_t major, uint32_t minor)
+{
+#if (RZG_DRAM_ECC == 1)
+	int nb_of_conf = 0;
+
+#if (RZG_LSI == RZG_G2E)
+	nb_of_conf = ARRAY_SIZE(rzg2_ek874_conf);
+	bl2_ecc_single_init(rzg2_ek874_conf, nb_of_conf);
+#elif (RZG_LSI == RZG_G2M)
+	bl2_ecc_dual_init();
+
+	if (major == 3)
+	{
+		nb_of_conf = ARRAY_SIZE(rzg2_hihope_rzg2m_conf);
+		bl2_ecc_single_init(rzg2_hihope_rzg2m_conf, nb_of_conf);
+	}
+#elif (RZG_LSI == RZG_G2N)
+	nb_of_conf = ARRAY_SIZE(rzg2_hihope_rzg2n_conf);
+	bl2_ecc_single_init(rzg2_hihope_rzg2n_conf, nb_of_conf);
+#elif (RZG_LSI == RZG_G2H)
+	nb_of_conf = ARRAY_SIZE(rzg2_hihope_rzg2h_conf);
+	bl2_ecc_dual_init();
+	bl2_ecc_single_init(rzg2_hihope_rzg2h_conf, nb_of_conf);
+	return;
+#else
+#error "Don't have ECC initialize routine(unknown)."
+#endif
+
+#endif /* RZG_DRAM_ECC == 1 */
+}
diff --git a/plat/renesas/rzg/bl2_plat_setup.c b/plat/renesas/rzg/bl2_plat_setup.c
index f576613..7228e11 100644
--- a/plat/renesas/rzg/bl2_plat_setup.c
+++ b/plat/renesas/rzg/bl2_plat_setup.c
@@ -66,6 +66,7 @@ extern void rzg_swdt_init(void);
 extern void rzg_rpc_init(void);
 extern void rzg_pfc_init(void);
 extern void rzg_dma_init(void);
+extern void bl2_ecc_init(uint32_t major, uint32_t minor);
 
 static void bl2_init_generic_timer(void);
 
@@ -692,6 +693,9 @@ void bl2_el3_early_platform_setup(u_register_t arg1, u_register_t arg2,
 		break;
 	}
 
+	major = 0;
+	minor = 0;
+
 	if ((PRR_PRODUCT_G2M == product) &&
 	    (PRR_PRODUCT_20 == (reg & RZG_MAJOR_MASK))) {
 		if (RZG_G2M_CUT_VER11 == (reg & PRR_CUT_MASK)) {
@@ -815,6 +819,8 @@ lcm_state:
 		rzg_qos_init();
 	}
 
+	bl2_ecc_init(major, minor);
+
 	/* Set up FDT */
 	ret = fdt_create_empty_tree(fdt, sizeof(fdt_blob));
 	if (ret) {
diff --git a/plat/renesas/rzg/platform.mk b/plat/renesas/rzg/platform.mk
index ea1855f..3504bfe 100644
--- a/plat/renesas/rzg/platform.mk
+++ b/plat/renesas/rzg/platform.mk
@@ -259,6 +259,28 @@ ifeq (${RZG_SYSTEM_RESET_KEEPON_DDR},1)
   endif
 endif
 
+# Process RZG_DRAM_ECC flag
+ifndef RZG_DRAM_ECC
+RZG_DRAM_ECC :=0
+endif
+$(eval $(call add_define,RZG_DRAM_ECC))
+
+# Process RZG_DRAM_ECC_FULL flag
+# 0 : ECC Full mode will not be applied
+# 1 : ECC Full mode dual channel will be applied
+# 2 : ECC Full mode single channel will be applied
+ifndef RZG_DRAM_ECC_FULL
+RZG_DRAM_ECC_FULL :=0
+endif
+$(eval $(call add_define,RZG_DRAM_ECC_FULL))
+
+# RZ/G2N and RZ/G2E do not support ECC Full mode dual channel.
+ifeq (${LSI}, $(filter ${LSI}, G2E G2N))
+  ifeq (${RZG_DRAM_ECC_FULL},1)
+    $(error "Error: RZ/${LSI} does not support ECC Full mode dual channel")
+  endif
+endif
+
 # Enable workarounds for selected Cortex-A53 erratas.
 ERRATA_A53_835769  := 1
 ifdef ERRATA_A53_843419
@@ -319,6 +341,7 @@ BL2_SOURCES	+=	${RZG_GIC_SOURCES}				\
 			plat/renesas/rzg/bl2_plat_mem_params_desc.c	\
 			plat/renesas/rzg/plat_image_load.c		\
 			plat/renesas/rzg/bl2_cpg_init.c			\
+			plat/renesas/rzg/bl2_fusa.c			\
 			drivers/renesas/rzg/console/rzg_printf.c	\
 			drivers/renesas/rzg/scif/scif.S			\
 			drivers/renesas/rzg/common.c			\
-- 
2.7.4

