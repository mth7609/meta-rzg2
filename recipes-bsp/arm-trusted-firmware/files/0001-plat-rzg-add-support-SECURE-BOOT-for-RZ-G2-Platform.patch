From 83fd975fd7d3c06e03cc76b4895304bf71b94731 Mon Sep 17 00:00:00 2001
From: Hien Huynh <hien.huynh.px@renesas.com>
Date: Thu, 15 Oct 2020 11:36:46 +0700
Subject: [PATCH] plat: rzg: add support SECURE BOOT for RZ/G2 Platform

This commit adds support SECURE BOOT for RZ/G2 Platform

Signed-off-by: Hien Huynh <hien.huynh.px@renesas.com>
---
 drivers/renesas/rzg/auth/auth_mod.c           |  73 +++++++-
 drivers/renesas/rzg/io/io_rzg.c               |   7 +-
 plat/renesas/rzg/bl2_plat_mem_params_desc.c   |  31 ++++
 plat/renesas/rzg/include/platform_def.h       |  12 ++
 plat/renesas/rzg/include/rzg_def.h            |   8 +
 plat/renesas/rzg/plat_storage.c               |  19 ++
 plat/renesas/rzg/platform.mk                  |   8 +-
 plat/renesas/rzg/sec_module/R_TSIP_Boot_Lib.h |  71 +++++++
 plat/renesas/rzg/sec_module/sec_module.c      | 255 ++++++++++++++++++++++++++
 plat/renesas/rzg/sec_module/sec_module.h      |  81 ++++++++
 plat/renesas/rzg/sec_module/sec_module.ld.S   |  53 ++++++
 plat/renesas/rzg/sec_module/sec_module.mk     |  80 ++++++++
 tools/renesas/rzg_layout_create/makefile      |   6 +
 tools/renesas/rzg_layout_create/sa6.c         |  41 +++++
 tools/renesas/rzg_layout_create/sa6.ld.S      |  26 +++
 15 files changed, 764 insertions(+), 7 deletions(-)
 create mode 100644 plat/renesas/rzg/sec_module/R_TSIP_Boot_Lib.h
 create mode 100644 plat/renesas/rzg/sec_module/sec_module.c
 create mode 100644 plat/renesas/rzg/sec_module/sec_module.h
 create mode 100644 plat/renesas/rzg/sec_module/sec_module.ld.S
 create mode 100644 plat/renesas/rzg/sec_module/sec_module.mk

diff --git a/drivers/renesas/rzg/auth/auth_mod.c b/drivers/renesas/rzg/auth/auth_mod.c
index 864b5d9..109bdc4 100644
--- a/drivers/renesas/rzg/auth/auth_mod.c
+++ b/drivers/renesas/rzg/auth/auth_mod.c
@@ -14,7 +14,12 @@
 #include <lib/mmio.h>
 #include <plat/common/platform.h>
 
-static int32_t (*secure_boot_api)(void);
+#if IMAGE_BL2 && RZG2_SECURE_BOOT
+#include "sec_module.h"
+#endif
+
+static st_sec_module_arg_t* secure_boot_arg;
+static fp_sec_module_api_t  secure_boot_api;
 
 int auth_mod_get_parent_id(unsigned int img_id, unsigned int *parent_id)
 {
@@ -28,9 +33,6 @@ int auth_mod_verify_img(unsigned int img_id, void *ptr, unsigned int len)
 #if IMAGE_BL2 && RZG2_SECURE_BOOT
 
 	switch (img_id) {
-	case BL31_IMAGE_ID:
-	case BL32_IMAGE_ID:
-	case BL33_IMAGE_ID:
 	case BL332_IMAGE_ID:
 	case BL333_IMAGE_ID:
 	case BL334_IMAGE_ID:
@@ -40,9 +42,71 @@ int auth_mod_verify_img(unsigned int img_id, void *ptr, unsigned int len)
 	case BL338_IMAGE_ID:
 		return ret;
 
+	case SEC_MODULE_ID:
+
+		/* Load Security Module to authenticate the program. */
+		secure_boot_arg = (st_sec_module_arg_t *) ptr;
+		secure_boot_api = (fp_sec_module_api_t)((uint64_t)ptr
+						+ SEC_MODULE_SHARED_SIZE);
+		return ret;
+
+	case SEC_KEYRING_ID:
+
+		/* Load the key ring and initialize Security Module. */
+		if (NULL == secure_boot_arg) {
+			return -1;
+		}
+
+		secure_boot_arg->cmd = CMD_RESET_INIT;
+		secure_boot_arg->len = sizeof(st_reset_init_t);
+		(secure_boot_arg->prm).reset_init.inst_area = (uint64_t) ptr;
+		break;
+
+	case BL31_IMAGE_ID:
+	case BL32_IMAGE_ID:
+	case BL33_IMAGE_ID:
+
+		/* Authenticate the loaded program with Security Module. */
+		if (NULL == secure_boot_arg) {
+			return -1;
+		}
+
+		/* The arguments of Security Module are placed
+		 * in the header of the program to be authenticated.
+		 */
+		*secure_boot_arg = *(st_sec_module_arg_t *) ptr;
+
+		if (CMD_VERIFY_DATA == secure_boot_arg->cmd) {
+			secure_boot_arg->prm.verify_data.heap = (uint64_t) SEC_MODULE_HEAP;
+		}
+		break;
+
 	default:
 		return -1;
 	}
+
+#if RZG_BL2_DCACHE == 1
+	/* clean and disable */
+	write_sctlr_el3(read_sctlr_el3() & ~SCTLR_C_BIT);
+	dcsw_op_all(DCCISW);
+#endif
+
+	/* Call Security Module */
+	if(SEC_MODULE_RET_OK != secure_boot_api())
+	{
+		ERROR("Verification Failed for image id = %d\n", img_id);
+		ret = -1;
+	}
+	else
+	{
+		NOTICE("Verification Successful for image id = %d\n", img_id);
+	}
+
+#if RZG_BL2_DCACHE == 1
+	/* enable */
+	write_sctlr_el3(read_sctlr_el3() | SCTLR_C_BIT);
+#endif
+
 #endif
 	return ret;
 }
@@ -65,4 +129,5 @@ void auth_mod_init(void)
 	NOTICE("BL2: Normal boot\n");
 	secure_boot_api = &normal_boot_verify;
 #endif
+	secure_boot_arg = NULL;
 }
diff --git a/drivers/renesas/rzg/io/io_rzg.c b/drivers/renesas/rzg/io/io_rzg.c
index 91c2e66..b08aba4 100644
--- a/drivers/renesas/rzg/io/io_rzg.c
+++ b/drivers/renesas/rzg/io/io_rzg.c
@@ -79,13 +79,16 @@ typedef struct {
 #define RZG_FLASH_CERT_HEADER		RZG_GET_FLASH_ADR(6U, 0U)
 #define RZG_EMMC_CERT_HEADER		(0x00030000U)
 
-#define RZG_COUNT_LOAD_BL31		(0U)
-#define RZG_COUNT_LOAD_BL33		(2U)
+#define RZG_COUNT_LOAD_BL31		(2U)
+#define RZG_COUNT_LOAD_BL33		(4U)
 
 #define RZG_MAX_LOAD_IMAGE		(RZG_MAX_BL3X_IMAGE + RZG_COUNT_LOAD_BL33)
 
 static const plat_rzg_name_offset_t name_offset[] = {
 
+	{SEC_MODULE_ID,  0U, RZG_ATTR_SET_ALL(0, 0, 0)},
+	{SEC_KEYRING_ID, 0U, RZG_ATTR_SET_ALL(1, 0, 1)},
+
 	{BL31_IMAGE_ID, 0U, RZG_ATTR_SET_ALL(RZG_COUNT_LOAD_BL31,    0, RZG_COUNT_LOAD_BL31)  },
 
 	/* BL3-2 is optional in the platform */
diff --git a/plat/renesas/rzg/bl2_plat_mem_params_desc.c b/plat/renesas/rzg/bl2_plat_mem_params_desc.c
index 9bd058c..b500f54 100644
--- a/plat/renesas/rzg/bl2_plat_mem_params_desc.c
+++ b/plat/renesas/rzg/bl2_plat_mem_params_desc.c
@@ -24,6 +24,37 @@
 extern uint64_t fdt_blob[PAGE_SIZE_4KB / sizeof(uint64_t)];
 
 static bl_mem_params_node_t bl2_mem_params_descs[] = {
+#if RZG2_SECURE_BOOT
+	{
+		.image_id = SEC_MODULE_ID,
+
+		SET_STATIC_PARAM_HEAD(ep_info, PARAM_EP, VERSION_2,
+		entry_point_info_t, SECURE | NON_EXECUTABLE),
+
+		SET_STATIC_PARAM_HEAD(image_info, PARAM_IMAGE_BINARY, VERSION_2,
+		image_info_t, 0),
+
+		.image_info.image_base = SEC_MODULE_BASE,
+		.image_info.image_max_size = SEC_MODULE_LIMIT - SEC_MODULE_BASE,
+
+		.next_handoff_image_id = INVALID_IMAGE_ID,
+	},
+	{
+		.image_id = SEC_KEYRING_ID,
+
+		SET_STATIC_PARAM_HEAD(ep_info, PARAM_EP, VERSION_2,
+		entry_point_info_t, SECURE | NON_EXECUTABLE),
+
+		SET_STATIC_PARAM_HEAD(image_info, PARAM_IMAGE_BINARY, VERSION_2,
+		image_info_t, 0),
+
+		.image_info.image_base = SEC_KEYRING_BASE,
+		.image_info.image_max_size = SEC_KEYRING_LIMIT - SEC_KEYRING_BASE,
+
+		.next_handoff_image_id = INVALID_IMAGE_ID,
+	},
+#endif
+
 	{
 		.image_id = BL31_IMAGE_ID,
 
diff --git a/plat/renesas/rzg/include/platform_def.h b/plat/renesas/rzg/include/platform_def.h
index 5997803..45c79c0 100644
--- a/plat/renesas/rzg/include/platform_def.h
+++ b/plat/renesas/rzg/include/platform_def.h
@@ -68,6 +68,8 @@
 #define BL336_CERT_ID		(NS_BL2U_IMAGE_ID + 19)
 #define BL337_CERT_ID		(NS_BL2U_IMAGE_ID + 20)
 #define BL338_CERT_ID		(NS_BL2U_IMAGE_ID + 21)
+#define SEC_MODULE_ID		(NS_BL2U_IMAGE_ID + 22)
+#define SEC_KEYRING_ID		(NS_BL2U_IMAGE_ID + 23)
 
 /* io drivers id */
 #define FLASH_DEV_ID		U(0)
@@ -145,6 +147,16 @@
  ******************************************************************************/
 #define BL33_BASE		DRAM1_NS_BASE
 
+/*******************************************************************************
+ * Security Module for Authentication
+ ******************************************************************************/
+#define SEC_MODULE_BASE		(RZG2_AUTH_MOD_BASE)
+#define SEC_MODULE_LIMIT	(SEC_MODULE_BASE + 0x1E000)
+
+#define SEC_KEYRING_BASE	(SEC_MODULE_LIMIT)
+#define SEC_KEYRING_LIMIT	(RZG2_AUTH_MOD_BASE + RZG2_AUTH_MOD_SIZE)
+
+#define SEC_MODULE_HEAP		U(0x50100000)
 
 /*******************************************************************************
  * Platform specific page table and MMU setup constants
diff --git a/plat/renesas/rzg/include/rzg_def.h b/plat/renesas/rzg/include/rzg_def.h
index 278efbf..65376a9 100644
--- a/plat/renesas/rzg/include/rzg_def.h
+++ b/plat/renesas/rzg/include/rzg_def.h
@@ -40,6 +40,14 @@
 #define	DRAM_PROTECTED_SIZE		ULL(0x03F00000)
 #define	RZG_BL31_CRASH_BASE		U(0x4403F000)
 #define	RZG_BL31_CRASH_SIZE		U(0x00001000)
+
+#ifndef SPD_NONE
+#define RZG2_AUTH_MOD_BASE		U(0x440E0000) /* secure */
+#else
+#define RZG2_AUTH_MOD_BASE		U(0x4A000000) /* non secure */
+#endif
+#define RZG2_AUTH_MOD_SIZE		U(0x00020000)
+
 /* Entrypoint mailboxes */
 #define MBOX_BASE			RZG_SHARED_MEM_BASE
 #define MBOX_SIZE			0x200
diff --git a/plat/renesas/rzg/plat_storage.c b/plat/renesas/rzg/plat_storage.c
index 4c17dc6..dd2bbe2 100644
--- a/plat/renesas/rzg/plat_storage.c
+++ b/plat/renesas/rzg/plat_storage.c
@@ -74,6 +74,15 @@ static const io_block_spec_t bl338_file_spec = {
 	.offset = BL338_IMAGE_ID,
 };
 
+#if RZG2_SECURE_BOOT
+static const io_block_spec_t secmod_file_spec = {
+	.offset = SEC_MODULE_ID,
+};
+
+static const io_block_spec_t seckey_file_spec = {
+	.offset = SEC_KEYRING_ID,
+};
+#endif
 
 static int32_t open_emmcdrv(const uintptr_t spec);
 static int32_t open_memmap(const uintptr_t spec);
@@ -134,6 +143,16 @@ static const struct plat_io_policy policies[] = {
 			    &rzg_dev_handle,
 			    (uintptr_t) &bl338_file_spec,
 			    &open_rzg},
+#if RZG2_SECURE_BOOT
+	[SEC_MODULE_ID] = {
+			    &rzg_dev_handle,
+			    (uintptr_t) &secmod_file_spec,
+			    &open_rzg},
+	[SEC_KEYRING_ID] = {
+			    &rzg_dev_handle,
+			    (uintptr_t) &seckey_file_spec,
+			    &open_rzg},
+#endif
 			{
 			    0, 0, 0
 			}
diff --git a/plat/renesas/rzg/platform.mk b/plat/renesas/rzg/platform.mk
index 3504bfe..c961fa0 100644
--- a/plat/renesas/rzg/platform.mk
+++ b/plat/renesas/rzg/platform.mk
@@ -315,6 +315,7 @@ PLAT_INCLUDES	:=	-Idrivers/renesas/rzg/ddr		\
 			-Idrivers/renesas/rzg/emmc		\
 			-Idrivers/renesas/rzg/pwrc		\
 			-Idrivers/renesas/rzg/io		\
+			-Iplat/renesas/rzg/sec_module		\
 			-Iplat/renesas/rzg			\
 			-Iplat/renesas/rzg/include		\
 			-Iplat/renesas/rzg/include/registers
@@ -398,7 +399,7 @@ clean_layout_tool:
 .PHONY: rzg_layout_create
 rzg_layout_create:
 	@echo "generating layout srecs"
-	${Q}${MAKE} CPPFLAGS="-D=AARCH64" ARCH=$(ARCH) --no-print-directory -C ${LAYOUT_TOOLPATH}
+	${Q}${MAKE} CPPFLAGS="-D=AARCH64" ARCH=$(ARCH) SPD_NONE=${SPD_NONE} --no-print-directory -C ${LAYOUT_TOOLPATH}
 
 # srecords
 SREC_PATH	= ${BUILD_PLAT}
@@ -415,3 +416,8 @@ rzg_srecord: $(BL2_ELF_SRC) $(BL31_ELF_SRC)
 	$(Q)$(OC) -O srec --srec-forceS3 ${BL2_ELF_SRC}  ${SREC_PATH}/bl2.srec
 	@echo "generating srec: ${SREC_PATH}/bl31.srec"
 	$(Q)$(OC) -O srec --srec-forceS3 ${BL31_ELF_SRC} ${SREC_PATH}/bl31.srec
+
+# Security Module
+.PHONY: sec_module
+sec_module:
+include plat/renesas/rzg/sec_module/sec_module.mk
diff --git a/plat/renesas/rzg/sec_module/R_TSIP_Boot_Lib.h b/plat/renesas/rzg/sec_module/R_TSIP_Boot_Lib.h
new file mode 100644
index 0000000..92f14a5
--- /dev/null
+++ b/plat/renesas/rzg/sec_module/R_TSIP_Boot_Lib.h
@@ -0,0 +1,71 @@
+/***********************************************************************************************************************
+* DISCLAIMER
+* This software is supplied by Renesas Electronics Corporation and is only intended for use with Renesas products. No
+* other uses are authorized. This software is owned by Renesas Electronics Corporation and is protected under all
+* applicable laws, including copyright laws.
+* THIS SOFTWARE IS PROVIDED "AS IS" AND RENESAS MAKES NO WARRANTIES REGARDING
+* THIS SOFTWARE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY,
+* FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. ALL SUCH WARRANTIES ARE EXPRESSLY DISCLAIMED. TO THE MAXIMUM
+* EXTENT PERMITTED NOT PROHIBITED BY LAW, NEITHER RENESAS ELECTRONICS CORPORATION NOR ANY OF ITS AFFILIATED COMPANIES
+* SHALL BE LIABLE FOR ANY DIRECT, INDIRECT, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES FOR ANY REASON RELATED TO THIS
+* SOFTWARE, EVEN IF RENESAS OR ITS AFFILIATES HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
+* Renesas reserves the right, without notice, to make changes to this software and to discontinue the availability of
+* this software. By using this software, you agree to the additional terms and conditions found by accessing the
+* following link:
+* http://www.renesas.com/disclaimer
+*
+* Copyright (C) 2011 - 2019 Renesas Electronics Corporation. All rights reserved.
+***********************************************************************************************************************/
+
+/*! *****************************************************************************
+    @file    R_TSIP_BOOT_LIB.h
+    @brief   TSIP Security Driver Boot Library API(No OS)
+
+    @par    Copyright
+    Renesas Electronics Corporation. All rights reserved.
+    @par    History
+    -    2019-02-18 : 2.2.01 keyring verification for RZ/G2
+    -    2019-10-28 : 2.2.02 user data verification for RZ/G2
+ ********************************************************************************/
+
+#ifndef  R_TSIP_BOOT_LIB_H_
+#define  R_TSIP_BOOT_LIB_H_
+
+/* Define */
+#define R_PASS                       (0x00000000)
+#define R_INITIALIZATION_FAIL        (0x00000001)
+#define R_PARAMETER_FAIL             (0x00000002)
+#define R_SEQUENCE_FAIL              (0x00000003)
+#define R_RESOURCE_CONFLICT_FAIL     (0x00000004)
+#define R_VERIFICATION_FAIL          (0x00000005)
+#define R_SERVERMESSAGE_FAIL         (0x00000006)
+#define R_SERVER_VERIFICATION_FAIL   (0x00000007)
+#define R_ROOTCA_CERTIFICATION_FAIL  (0x00000008)
+#define R_USEKEY_FAIL                (0x00000009)
+#define R_CONNECTSESSION_FAIL        (0x0000000A)
+#define R_INDATA_OUTDATA_ACCESS_FAIL (0x0000000B)
+#define R_PROVISIONING_KEY_FAIL      (0x0000000C)
+#define R_GENERATION_FAIL            (0x0000000D)
+#define R_KEYRING_FORMAT_FAIL        (0x0000000E)
+#define R_ALLOCATE_MEMORY_FAIL       (0x00000020)
+#define R_MMAP_FAIL                  (0x00000021)
+#define R_INITIALIZATION_ERROR       (0x00000080)
+
+#define REENC_BOOT_DATA_MAX             (16)
+
+typedef struct str_tsip_reenc_boot_data {
+	unsigned char *InData_BootData;
+	unsigned long  InData_BootData_ByteSize;
+	unsigned char *OutData_BootData;
+} TSIP_REENC_BOOT_DATA[REENC_BOOT_DATA_MAX];
+
+
+/* API */
+unsigned long R_TSIP_Init(unsigned char *S_RAMData, unsigned char *S_INSTData);
+unsigned long R_TSIP_Inject_Key(unsigned char *InData_ProvisioningKeyOperationCode, unsigned char *InData_KeyRingOperationCode);
+unsigned long R_TSIP_ReEncBootData(TSIP_REENC_BOOT_DATA  *tsip_reenc_bootdata);
+unsigned long R_TSIP_Inject_Addon_Key(unsigned long InData_Operation, unsigned char *InData_IV, unsigned char *InData_KeyOperationCode, unsigned char *OutData_KeyOperationCode);
+unsigned long R_TSIP_VerifyBootData(unsigned char *InData_BootData, unsigned long InData_BootData_ByteSize, unsigned char *InData_BootData_HeapArea, unsigned char *OutData_BootData);
+unsigned long R_TSIP_KeyRing_Verify(void);
+
+#endif  /* R_TSIP_BOOT_LIB_H_ */
diff --git a/plat/renesas/rzg/sec_module/sec_module.c b/plat/renesas/rzg/sec_module/sec_module.c
new file mode 100644
index 0000000..04fef73
--- /dev/null
+++ b/plat/renesas/rzg/sec_module/sec_module.c
@@ -0,0 +1,255 @@
+/*
+ * Copyright (c) 2020, Renesas Electronics Corporation. All rights reserved.
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+
+/******************************************************************************
+ Includes <System Includes> , "Project Includes"
+******************************************************************************/
+#include <stdint.h>
+#include <string.h>
+
+#include <platform_def.h>
+
+#include "sec_module.h"
+#include "R_TSIP_Boot_Lib.h"
+
+/******************************************************************************
+Macro definitions
+******************************************************************************/
+
+#define WORK_ADR_SRAM_SIZE (432)
+
+/******************************************************************************
+Typedef definitions
+******************************************************************************/
+typedef int (* func_cmd) (unsigned int len, void* const param);
+
+/******************************************************************************
+Exported global variables and functions (to be accessed by other files)
+******************************************************************************/
+volatile st_sec_module_arg_t gs_arguments __attribute__((section("SHARED_AREA"))) = {0};
+
+/******************************************************************************
+Private global variables and functions
+******************************************************************************/
+static int cmd_reset_init(unsigned int len, void * const param);
+static int cmd_inject_key(unsigned int len, void * const param);
+static int cmd_re_enc_data(unsigned int len, void * const param);
+static int cmd_verify_key(unsigned int len, void * const param);
+static int cmd_verify_data(unsigned int len, void * const param);
+
+static const func_cmd gs_command_function[CMD_MAX] = {
+	cmd_reset_init,
+	cmd_inject_key,
+	cmd_re_enc_data,
+	cmd_verify_key,
+	cmd_verify_data,
+};
+
+static uint8_t gs_work_addr_sram[WORK_ADR_SRAM_SIZE];
+
+/******************************************************************************
+ * Function Name : sec_module
+ * Description   : main function of sec_module
+ * Arguments     : none
+ * Return Value  : SEC_MODULE_RET_OK
+ *                  - success
+ *                 SEC_MODULE_RET_NG
+ *                  - fail
+ ******************************************************************************/
+int sec_module (void)
+{
+	e_cmd_type_t cmd = (e_cmd_type_t)gs_arguments.cmd;
+	unsigned int len = (unsigned int)gs_arguments.len;
+	void * prm = (void *)&gs_arguments.prm;
+
+	if ((0 > cmd) || (CMD_MAX <= cmd)) {
+		return SEC_MODULE_RET_NG;
+	}
+
+	return gs_command_function[cmd] (len, prm);
+} /* End of function sec_module() */
+
+/******************************************************************************
+ * Function Name : cmd_reset_init
+ * Description   : function of CMD_RESET_INIT command
+ * Arguments     : len
+ *                  - Size of command parameter
+ *                 param
+ *                  - Pointer where the command parameter is located
+ * Return Value  : SEC_MODULE_RET_OK
+ *                  - success
+ *                 SEC_MODULE_RET_NG
+ *                  - fail
+ ******************************************************************************/
+static int cmd_reset_init(unsigned int len, void* const param)
+{
+	unsigned long err;
+	unsigned char * S_RAMData;
+	unsigned char * S_INSTData;
+
+	st_reset_init_t* const p_reset_init = (st_reset_init_t *)param;
+
+	if((sizeof(st_reset_init_t) != len) || (NULL == p_reset_init)) {
+		return SEC_MODULE_RET_NG;
+	}
+
+	S_RAMData = (unsigned char *)gs_work_addr_sram;
+	S_INSTData = (unsigned char *)p_reset_init->inst_area;
+
+	err = R_TSIP_Init (S_RAMData, S_INSTData);
+	if (R_PASS != err) {
+		return SEC_MODULE_RET_NG;
+	}
+
+	return SEC_MODULE_RET_OK;
+} /* End of function cmd_reset_init() */
+
+/******************************************************************************
+ * Function Name : cmd_inject_key
+ * Description   : function of CMD_INJECT_KEY command
+ * Arguments     : len
+ *                  - Size of command parameter
+ *                 param
+ *                  - Pointer where the command parameter is located
+ * Return Value  : SEC_MODULE_RET_OK
+ *                  - success
+ *                 SEC_MODULE_RET_NG
+ *                  - fail
+ ******************************************************************************/
+static int cmd_inject_key(unsigned int len, void* const param)
+{
+
+	unsigned long err;
+	unsigned char *InData_ProvisioningKeyOperationCode;
+	unsigned char *InData_KeyRingOperationCode;
+
+	st_inject_key_t* const p_inject_key = (st_inject_key_t *)param;
+
+	if((sizeof(st_inject_key_t) != len) || (NULL == p_inject_key)) {
+		return SEC_MODULE_RET_NG;
+	}
+
+	InData_ProvisioningKeyOperationCode = (unsigned char *)p_inject_key->prov_key;
+	InData_KeyRingOperationCode = (unsigned char *)p_inject_key->key_ring;
+
+	err = R_TSIP_Inject_Key(InData_ProvisioningKeyOperationCode, InData_KeyRingOperationCode);
+	if (R_PASS != err) {
+		return SEC_MODULE_RET_NG;
+	}
+
+	return SEC_MODULE_RET_OK;
+} /* End of function cmd_inject_key() */
+
+/******************************************************************************
+ * Function Name : cmd_re_enc_data
+ * Description   : function of CMD_RE_ENC_DATA command
+ * Arguments     : len
+ *                  - Size of command parameter
+ *                 param
+ *                  - Pointer where the command parameter is located
+ * Return Value  : SEC_MODULE_RET_OK
+ *                  - success
+ *                 SEC_MODULE_RET_NG
+ *                  - fail
+ ******************************************************************************/
+static int cmd_re_enc_data(unsigned int len, void* const param)
+{
+	unsigned long err;
+	TSIP_REENC_BOOT_DATA tsip_reenc_boot_data;
+	st_re_enc_data_t* const p_re_enc_data = (st_re_enc_data_t *)param;
+
+	if((sizeof(st_re_enc_data_t) != len) || (NULL == p_re_enc_data)) {
+		return SEC_MODULE_RET_NG;
+	}
+
+	for (int i = 0; i < 16; i++) {
+		tsip_reenc_boot_data[i].InData_BootData = 0;
+		tsip_reenc_boot_data[i].InData_BootData_ByteSize = 0;
+		tsip_reenc_boot_data[i].OutData_BootData = 0;
+
+		if(i < p_re_enc_data->num) {
+			tsip_reenc_boot_data[i].InData_BootData = (unsigned char *)p_re_enc_data->list[i].src;
+			tsip_reenc_boot_data[i].InData_BootData_ByteSize = p_re_enc_data->list[i].len;
+			tsip_reenc_boot_data[i].OutData_BootData = (unsigned char *)p_re_enc_data->list[i].dst;
+		}
+	}
+
+	err = R_TSIP_ReEncBootData(&tsip_reenc_boot_data);
+	if (R_PASS != err) {
+		return SEC_MODULE_RET_NG;
+	}
+
+	return SEC_MODULE_RET_OK;
+} /* End of function cmd_re_enc_data() */
+
+/******************************************************************************
+ * Function Name : cmd_verify_key
+ * Description   : function of CMD_VERIFY_KEY command
+ * Arguments     : len
+ *                  - Size of command parameter
+ *                 param
+ *                  - Pointer where the command parameter is located
+ * Return Value  : SEC_MODULE_RET_OK
+ *                  - success
+ *                 SEC_MODULE_RET_NG
+ *                  - fail
+ ******************************************************************************/
+static int cmd_verify_key(unsigned int len, void* const param)
+{
+	unsigned long err;
+	(void)len;
+	(void)param;
+
+	err = R_TSIP_KeyRing_Verify();
+	if (R_PASS != err) {
+		return SEC_MODULE_RET_NG;
+	}
+
+	return SEC_MODULE_RET_OK;
+} /* End of function cmd_verify_key() */
+
+/******************************************************************************
+ * Function Name : cmd_verify_data
+ * Description   : function of CMD_VERIFY_DATA command
+ * Arguments     : len
+ *                  - Size of command parameter
+ *                 param
+ *                  - Pointer where the command parameter is located
+ * Return Value  : SEC_MODULE_RET_OK
+ *                  - success
+ *                 SEC_MODULE_RET_NG
+ *                  - fail
+ ******************************************************************************/
+static int cmd_verify_data(unsigned int len, void* const param)
+{
+	unsigned long err;
+	unsigned char *InData_BootData;
+	unsigned long InData_BootData_ByteSize;
+	unsigned char *InData_BootData_HeapArea;
+	unsigned char *OutData_BootData;
+
+	st_verify_data_t* const p_verify_data = (st_verify_data_t *)param;
+
+	if(sizeof(st_verify_data_t) != len) {
+		return SEC_MODULE_RET_NG;
+	}
+
+	InData_BootData = (unsigned char *)p_verify_data->src;
+	InData_BootData_ByteSize = p_verify_data->len;
+	InData_BootData_HeapArea = (unsigned char *)p_verify_data->heap;
+	OutData_BootData = (unsigned char *)p_verify_data->dst;
+
+	/* User Data decryption and verificaiton. In this sample, use same heap area for each user data */
+	err = R_TSIP_VerifyBootData (InData_BootData,
+	InData_BootData_ByteSize,
+	InData_BootData_HeapArea,
+	OutData_BootData);
+	if (R_PASS != err) {
+		return SEC_MODULE_RET_NG;
+	}
+
+	return SEC_MODULE_RET_OK;
+} /* End of function cmd_verify_data() */
diff --git a/plat/renesas/rzg/sec_module/sec_module.h b/plat/renesas/rzg/sec_module/sec_module.h
new file mode 100644
index 0000000..fcae317
--- /dev/null
+++ b/plat/renesas/rzg/sec_module/sec_module.h
@@ -0,0 +1,81 @@
+/*
+ * Copyright (c) 2020, Renesas Electronics Corporation. All rights reserved.
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+
+#ifndef SEC_MODULE_H
+#define SEC_MODULE_H
+
+/******************************************************************************
+Macro definitions
+******************************************************************************/
+
+/* Return Value */
+#define SEC_MODULE_RET_OK (0)
+#define SEC_MODULE_RET_NG (-1)
+
+#define SEC_MODULE_SHARED_SIZE (0x200)
+
+#define SEC_MODULE_ENTRY (SEC_MODULE_BASE + SEC_MODULE_SHARED_SIZE)
+
+#ifndef __ASSEMBLER__
+
+/******************************************************************************
+Typedef definitions
+******************************************************************************/
+
+typedef int (* fp_sec_module_api_t) (void);
+
+typedef enum {
+	CMD_RESET_INIT = 0,
+	CMD_INJECT_KEY,
+	CMD_RE_ENC_DATA,
+	CMD_VERIFY_KEY,
+	CMD_VERIFY_DATA,
+	CMD_MAX,
+} e_cmd_type_t;
+
+typedef struct {
+	uint64_t inst_area;
+} st_reset_init_t;
+
+typedef struct {
+	uint64_t key_ring;
+	uint64_t prov_key;
+} st_inject_key_t;
+
+typedef struct {
+	int num;
+	struct {
+		uint64_t src;
+		uint64_t len;
+		uint64_t dst;
+	} list[16];
+} st_re_enc_data_t;
+
+typedef struct {
+	uint64_t src;
+	uint64_t len;
+	uint64_t dst;
+	uint64_t heap;
+} st_verify_data_t;
+
+typedef struct {
+	uint64_t cmd;
+	uint64_t len;
+	union {
+		st_reset_init_t reset_init;
+		st_inject_key_t inject_key;
+		st_re_enc_data_t re_enc_data;
+		st_verify_data_t verify_data;
+	} prm;
+} st_sec_module_arg_t;
+
+/******************************************************************************
+Exported global functions (to be accessed by other files)
+******************************************************************************/
+
+#endif /* __ASSEMBLER__ */
+
+#endif /* SEC_MODULE_H */
diff --git a/plat/renesas/rzg/sec_module/sec_module.ld.S b/plat/renesas/rzg/sec_module/sec_module.ld.S
new file mode 100644
index 0000000..0f2be94
--- /dev/null
+++ b/plat/renesas/rzg/sec_module/sec_module.ld.S
@@ -0,0 +1,53 @@
+/*
+ * Copyright (c) 2020, Renesas Electronics Corporation. All rights reserved.
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ */
+
+#include <platform_def.h>
+#include <lib/xlat_tables/xlat_tables_defs.h>
+#include <sec_module.h>
+
+OUTPUT_FORMAT(PLATFORM_LINKER_FORMAT)
+OUTPUT_ARCH(PLATFORM_LINKER_ARCH)
+ENTRY(sec_module)
+
+MEMORY {
+    RAM (rwx): ORIGIN = SEC_MODULE_BASE, LENGTH = SEC_MODULE_LIMIT - SEC_MODULE_BASE
+}
+
+
+SECTIONS
+{
+    . = SEC_MODULE_BASE;
+    ASSERT(. == ALIGN(PAGE_SIZE),
+           "SECMOD_BASE address is not aligned on a page boundary.")
+    arg . : {
+        KEEP(* (SHARED_AREA))
+       . = SEC_MODULE_SHARED_SIZE;
+    } >RAM
+    . = SEC_MODULE_ENTRY;
+    ro . : {
+        *(.text.sec_module)
+        *(.text*)
+        *(.rodata*)
+        . = ALIGN(PAGE_SIZE);
+        __RO_END__ = .;
+    } >RAM
+    __RW_START__ = . ;
+    .data . : {
+        __DATA_START__ = .;
+        *(.data*)
+        __DATA_END__ = .;
+    } >RAM
+    .bss : ALIGN(16) {
+        __BSS_START__ = .;
+        *(.bss*)
+        *(COMMON)
+        __BSS_END__ = .;
+    } >RAM
+    __RW_END__ = .;
+    __SECMOD_END__ = .;
+    __BSS_SIZE__ = SIZEOF(.bss);
+    ASSERT(. <= SEC_MODULE_LIMIT, "Security Module has exceeded its limit.")
+}
diff --git a/plat/renesas/rzg/sec_module/sec_module.mk b/plat/renesas/rzg/sec_module/sec_module.mk
new file mode 100644
index 0000000..24ab603
--- /dev/null
+++ b/plat/renesas/rzg/sec_module/sec_module.mk
@@ -0,0 +1,80 @@
+#
+# Copyright (c) 2020, Renesas Electronics Corporation. All rights reserved.
+#
+# SPDX-License-Identifier: BSD-3-Clause
+#
+
+SEC_MODULE_NAME	= sec_module
+
+# directory definition
+SEC_MODULE_TOP		= plat/renesas/rzg/${SEC_MODULE_NAME}
+SEC_MODULE_BUILD	= ${BUILD_PLAT}/${SEC_MODULE_NAME}
+
+
+#output file name
+SEC_MODULE_OUTPUT	= ${BUILD_PLAT}/${SEC_MODULE_NAME}.bin
+SEC_MODULE_SREC		= ${BUILD_PLAT}/${SEC_MODULE_NAME}.srec
+SEC_MODULE_ELF		= ${SEC_MODULE_BUILD}/${SEC_MODULE_NAME}.elf
+SEC_MODULE_MAPFILE	= ${SEC_MODULE_BUILD}/${SEC_MODULE_NAME}.map
+
+
+#input file name
+$(eval SEC_MODULE_SOURCES = ${SEC_MODULE_TOP}/sec_module.c)
+
+SEC_MODULE_LIBDIR	?= ${SEC_MODULE_TOP}
+
+SEC_MODULE_LIBRARY	= -L${SEC_MODULE_LIBDIR}
+
+ifeq (${LSI},G2H)
+	SEC_MODULE_LIBRARY	+= -lr_tsip_boot_lib_noos_g2h
+endif
+ifeq (${LSI},G2M)
+	SEC_MODULE_LIBRARY	+= -lr_tsip_boot_lib_noos_g2m
+endif
+ifeq (${LSI},G2N)
+	SEC_MODULE_LIBRARY	+= -lr_tsip_boot_lib_noos_g2n
+endif
+ifeq (${LSI},G2E)
+	SEC_MODULE_LIBRARY	+= -lr_tsip_boot_lib_noos_g2e
+endif
+
+PLAT_INCLUDES		+= -I${SEC_MODULE_TOP}
+
+#object file name
+$(eval BL2_OBJECTS = $(addprefix ${BUILD_PLAT}/bl2/,$(call SOURCES_TO_OBJS,${BL2_SOURCES} ${BL_COMMON_SOURCES})))
+$(eval SEC_MODULE_OBJECTS = $(addprefix ${SEC_MODULE_BUILD}/,$(call SOURCES_TO_OBJS,${SEC_MODULE_SOURCES})))
+
+
+#linker file name
+SEC_MODULE_LINKERFILE = ${SEC_MODULE_TOP}/sec_module.ld.S
+SEC_MODULE_SCRIPTFILE = ${SEC_MODULE_BUILD}/sec_module.ld
+SEC_MODULE_DEPENDENT  = $(SEC_MODULE_SCRIPTFILE:.ld=.d)
+
+# linker flags
+$(eval SEC_MODULE_LDFLAGS = --script ${SEC_MODULE_SCRIPTFILE} -Map ${SEC_MODULE_MAPFILE} ${SEC_MODULE_LIBRARY})
+
+###################################################
+# Compile
+
+$(SEC_MODULE_NAME): $(SEC_MODULE_OUTPUT)
+
+$(SEC_MODULE_OUTPUT) : $(SEC_MODULE_SREC)
+	$(Q)$(OC) -I srec -O binary --srec-forceS3 $(SEC_MODULE_SREC) $@
+
+
+$(SEC_MODULE_SREC): $(SEC_MODULE_ELF)
+	$(Q)$(ECHO) "generating srec: $@"
+	$(Q)$(OC) -O srec --srec-forceS3 $< $@
+
+
+$(SEC_MODULE_ELF):  $(SEC_MODULE_BUILD) $(SEC_MODULE_OBJECTS) libraries $(SEC_MODULE_SCRIPTFILE)
+	$(ECHO) "  LD      $@"
+	$(Q)$(LD) -o $@ $(TF_LDFLAGS) $(SEC_MODULE_OBJECTS) $(BL2_OBJECTS) $(LDPATHS) $(LDLIBS) $(SEC_MODULE_LDFLAGS)
+
+
+$(SEC_MODULE_SCRIPTFILE): $(SEC_MODULE_LINKERFILE)
+	$(ECHO) "  CPP     $@"
+	$(Q)$(CPP) $(CPPFLAGS) $(TF_CFLAGS_$(ARCH)) -P -x assembler-with-cpp -D__LINKER__ -Wp,-MD,$(SEC_MODULE_DEPENDENT) -MT $@ -MP -o $@ $<
+
+$(eval $(call MAKE_PREREQ_DIR,${SEC_MODULE_BUILD},${BUILD_PLAT}))
+$(eval $(call MAKE_OBJS,$(SEC_MODULE_BUILD),$(SEC_MODULE_SOURCES),2))
diff --git a/tools/renesas/rzg_layout_create/makefile b/tools/renesas/rzg_layout_create/makefile
index cef6d53..7ac76d1 100644
--- a/tools/renesas/rzg_layout_create/makefile
+++ b/tools/renesas/rzg_layout_create/makefile
@@ -55,6 +55,12 @@ endif
 endif
 $(eval $(call add_define,RZG_SA6_TYPE))
 
+# Process SPD_NONE flag
+ifeq (${SPD_NONE},1)
+SPD_NONE := 1
+$(eval $(call add_define,SPD_NONE))
+endif
+
 RZG_VMA_ADJUST_ADDR := 0xE6320000
 $(eval $(call add_define,RZG_VMA_ADJUST_ADDR))
 
diff --git a/tools/renesas/rzg_layout_create/sa6.c b/tools/renesas/rzg_layout_create/sa6.c
index 2d6c5c6..908edb5 100644
--- a/tools/renesas/rzg_layout_create/sa6.c
+++ b/tools/renesas/rzg_layout_create/sa6.c
@@ -13,6 +13,14 @@
 
 /* Number of content cert for Non-secure Target Program(BL33x) */
 #define RZG_IMAGE_NUM			(0x00000001U)
+/* Source address on Security Module */
+#define SEC_MODSRC_ADDRESS		(0x00400000U)
+/* Reserved */
+#define SEC_MOD_PARTITION		(0x00000000U)
+/* Source address on Trusted Keyring */
+#define SEC_KEYSRC_ADDRESS		(0x00500000U)
+/* Reserved */
+#define SEC_KEY_PARTITION		(0x00000000U)
 /* Source address on flash for BL31 */
 #define RZG_BL31SRC_ADDRESS		(0x001C0000U)
 /* Reserved */
@@ -87,6 +95,29 @@
 
 #endif /* RZG_SA6_TYPE == RZG_SA6_TYPE_HYPERFLASH */
 
+/* Destination address for Security Module */
+#ifndef SPD_NONE
+#define SEC_MODDST_ADDRESS		(0x440E0000U)
+#define SEC_MODDST_ADDRESSH		(0x00000000U)
+/* Destination size for Security Module */
+#define SEC_MODDST_SIZE			(0x00007800U)
+/* Destination address for Secure Keys */
+#define SEC_KEYDST_ADDRESS		(0x440FE000U)
+#define SEC_KEYDST_ADDRESSH		(0x00000000U)
+/* Destination size for Secure Keys */
+#define SEC_KEYDST_SIZE			(0x00000400U)
+#else
+#define SEC_MODDST_ADDRESS		(0x4A000000U)
+#define SEC_MODDST_ADDRESSH		(0x00000000U)
+/* Destination size for Security Module */
+#define SEC_MODDST_SIZE			(0x00007800U)
+/* Destination address for Secure Keys */
+#define SEC_KEYDST_ADDRESS		(0x4A01E000U)
+#define SEC_KEYDST_ADDRESSH		(0x00000000U)
+/* Destination size for Secure Keys */
+#define SEC_KEYDST_SIZE			(0x00000400U)
+#endif
+
 /* Destination address for BL31 */
 #define RZG_BL31DST_ADDRESS		(0x44000000U)
 #define RZG_BL31DST_ADDRESSH		(0x00000000U)
@@ -133,6 +164,10 @@
 
 /* SA6 */
 const uint64_t __attribute__ ((section (".sa6_image_num")))	image_num	= RZG_IMAGE_NUM;
+const uint64_t __attribute__ ((section (".sa6_secmodsrc_addr"))) secmodsrc_addr = SEC_MODSRC_ADDRESS;
+const uint64_t __attribute__ ((section (".sa6_secmodpartition")))secmodpartition = SEC_MOD_PARTITION;
+const uint64_t __attribute__ ((section (".sa6_seckeysrc_addr"))) seckeysrc_addr = SEC_KEYSRC_ADDRESS;
+const uint64_t __attribute__ ((section (".sa6_seckeypartition")))seckeypartition= SEC_KEY_PARTITION;
 const uint64_t __attribute__ ((section (".sa6_bl31src_addr")))	bl31src_addr	= RZG_BL31SRC_ADDRESS;
 const uint64_t __attribute__ ((section (".sa6_bl31partition")))	bl31partition	= RZG_BL31_PARTITION;
 const uint64_t __attribute__ ((section (".sa6_bl32src_addr")))	bl32src_addr	= RZG_BL32SRC_ADDRESS;
@@ -153,6 +188,12 @@ const uint64_t __attribute__ ((section (".sa6_bl337src_addr")))	bl337src_addr	=
 const uint64_t __attribute__ ((section (".sa6_bl337partition")))bl337partition	= RZG_BL337_PARTITION;
 const uint64_t __attribute__ ((section (".sa6_bl338src_addr")))	bl338src_addr	= RZG_BL338SRC_ADDRESS;
 const uint64_t __attribute__ ((section (".sa6_bl338partition")))bl338partition	= RZG_BL338_PARTITION;
+const uint32_t __attribute__ ((section (".sa6_secmoddst_addr"))) secmoddst_addr = SEC_MODDST_ADDRESS;
+const uint32_t __attribute__ ((section (".sa6_secmoddst_addrh")))secmoddst_addrh= SEC_MODDST_ADDRESSH;
+const uint32_t __attribute__ ((section (".sa6_secmoddst_size"))) secmoddst_size = SEC_MODDST_SIZE;
+const uint32_t __attribute__ ((section (".sa6_seckeydst_addr"))) seckeydst_addr = SEC_KEYDST_ADDRESS;
+const uint32_t __attribute__ ((section (".sa6_seckeydst_addrh")))seckeydst_addrh= SEC_KEYDST_ADDRESSH;
+const uint32_t __attribute__ ((section (".sa6_seckeydst_size"))) seckeydst_size = SEC_KEYDST_SIZE;
 const uint32_t __attribute__ ((section (".sa6_bl31dst_addr")))	bl31dst_addr	= RZG_BL31DST_ADDRESS;
 const uint32_t __attribute__ ((section (".sa6_bl31dst_addrh")))	bl31dst_addrh	= RZG_BL31DST_ADDRESSH;
 const uint32_t __attribute__ ((section (".sa6_bl31dst_size")))	bl31dst_size	= RZG_BL31DST_SIZE;
diff --git a/tools/renesas/rzg_layout_create/sa6.ld.S b/tools/renesas/rzg_layout_create/sa6.ld.S
index 29bbbac..efe5539 100644
--- a/tools/renesas/rzg_layout_create/sa6.ld.S
+++ b/tools/renesas/rzg_layout_create/sa6.ld.S
@@ -12,6 +12,17 @@ SECTIONS
 		. = 0x00000008;
 	}
 
+	.src_addr_sec : {
+		KEEP(*(.sa6_secmodsrc_addr))
+		. = 0x00000008;
+		KEEP(*(.sa6_secmodpartition))
+		. = 0x000000010;
+		KEEP(*(.sa6_seckeysrc_addr))
+		. = 0x000000018;
+		KEEP(*(.sa6_seckeypartition))
+		. = 0x00000020;
+	}
+
 	.src_addr : {
 		KEEP(*(.sa6_bl31src_addr))
 		. = 0x00000008;
@@ -56,6 +67,21 @@ SECTIONS
 
 	. = 0x00000554;
 
+	.dst_addr_sec : {
+		KEEP(*(.sa6_secmoddst_addr))
+		. = 0x00000004;
+		KEEP(*(.sa6_secmoddst_addrh))
+		. = 0x00000110;
+		KEEP(*(.sa6_secmoddst_size))
+		. = 0x00000800;
+		KEEP(*(.sa6_seckeydst_addr))
+		. = 0x00000804;
+		KEEP(*(.sa6_seckeydst_addrh))
+		. = 0x00000910;
+		KEEP(*(.sa6_seckeydst_size))
+		. = 0x00001000;
+	}
+
 	.dst_addr : {
 		KEEP(*(.sa6_bl31dst_addr))
 		. = 0x00000004;
-- 
2.7.4

