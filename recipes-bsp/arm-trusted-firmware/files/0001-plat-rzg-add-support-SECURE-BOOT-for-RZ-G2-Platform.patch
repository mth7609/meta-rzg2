From b02ad3e4996e748af9a7e33b686dbb49480d7aaa Mon Sep 17 00:00:00 2001
From: Takunori Otsuka <takunori.otsuka.ur@renesas.com>
Date: Mon, 22 Mar 2021 11:33:39 +0900
Subject: [PATCH 1/2] plat: rzg: add support SECURE BOOT for RZ/G2 Platform

This commit adds support SECURE BOOT for RZ/G2 Platform

Signed-off-by: Takunori Otsuka <takunori.otsuka.ur@renesas.com>
---
 drivers/renesas/rzg/auth/auth_mod.c         | 136 ++++++++++++++++++++++++++--
 drivers/renesas/rzg/io/io_rzg.c             |   7 +-
 plat/renesas/rzg/bl2_plat_mem_params_desc.c |  31 +++++++
 plat/renesas/rzg/include/platform_def.h     |  12 +++
 plat/renesas/rzg/include/rzg_def.h          |   3 +
 plat/renesas/rzg/plat_storage.c             |  19 ++++
 plat/renesas/rzg/platform.mk                |   1 +
 tools/renesas/rzg_layout_create/makefile    |   0
 tools/renesas/rzg_layout_create/sa6.c       |  29 ++++++
 tools/renesas/rzg_layout_create/sa6.ld.S    |  26 ++++++
 10 files changed, 256 insertions(+), 8 deletions(-)
 mode change 100644 => 100755 drivers/renesas/rzg/auth/auth_mod.c
 mode change 100644 => 100755 plat/renesas/rzg/include/platform_def.h
 mode change 100644 => 100755 plat/renesas/rzg/include/rzg_def.h
 mode change 100644 => 100755 plat/renesas/rzg/platform.mk
 mode change 100644 => 100755 tools/renesas/rzg_layout_create/makefile
 mode change 100644 => 100755 tools/renesas/rzg_layout_create/sa6.c

diff --git a/drivers/renesas/rzg/auth/auth_mod.c b/drivers/renesas/rzg/auth/auth_mod.c
old mode 100644
new mode 100755
index 864b5d9..055e358
--- a/drivers/renesas/rzg/auth/auth_mod.c
+++ b/drivers/renesas/rzg/auth/auth_mod.c
@@ -14,7 +14,63 @@
 #include <lib/mmio.h>
 #include <plat/common/platform.h>
 
-static int32_t (*secure_boot_api)(void);
+typedef int32_t (* fp_sec_module_api_t) (void);
+
+#if IMAGE_BL2 && RZG2_SECURE_BOOT
+
+#define SEC_MODULE_RET_OK (0)
+#define SEC_MODULE_SHARED_SIZE (0x200)
+
+typedef enum {
+	CMD_RESET_INIT = 0,
+	CMD_INJECT_KEY,
+	CMD_RE_ENC_DATA,
+	CMD_VERIFY_KEY,
+	CMD_VERIFY_DATA,
+	CMD_MAX,
+} e_cmd_type_t;
+
+typedef struct {
+	uint64_t inst_area;
+} st_reset_init_t;
+
+typedef struct {
+	uint64_t key_ring;
+	uint64_t prov_key;
+} st_inject_key_t;
+
+typedef struct {
+	int num;
+	struct {
+		uint64_t src;
+		uint64_t len;
+		uint64_t dst;
+	} list[16];
+} st_re_enc_data_t;
+
+typedef struct {
+	uint64_t src;
+	uint64_t len;
+	uint64_t dst;
+	uint64_t heap;
+} st_verify_data_t;
+
+typedef struct {
+	uint64_t cmd;
+	uint64_t len;
+	union {
+		st_reset_init_t reset_init;
+		st_inject_key_t inject_key;
+		st_re_enc_data_t re_enc_data;
+		st_verify_data_t verify_data;
+	} prm;
+} st_sec_module_arg_t;
+
+static st_sec_module_arg_t* secure_boot_arg;
+
+#endif
+
+static fp_sec_module_api_t  secure_boot_api;
 
 int auth_mod_get_parent_id(unsigned int img_id, unsigned int *parent_id)
 {
@@ -26,11 +82,9 @@ int auth_mod_verify_img(unsigned int img_id, void *ptr, unsigned int len)
 	int32_t ret = 0;
 
 #if IMAGE_BL2 && RZG2_SECURE_BOOT
+	uint64_t auth_len;
 
 	switch (img_id) {
-	case BL31_IMAGE_ID:
-	case BL32_IMAGE_ID:
-	case BL33_IMAGE_ID:
 	case BL332_IMAGE_ID:
 	case BL333_IMAGE_ID:
 	case BL334_IMAGE_ID:
@@ -40,9 +94,78 @@ int auth_mod_verify_img(unsigned int img_id, void *ptr, unsigned int len)
 	case BL338_IMAGE_ID:
 		return ret;
 
+	case SEC_MODULE_ID:
+
+		/* Load Security Module to authenticate the program. */
+		secure_boot_arg = (st_sec_module_arg_t *) ptr;
+		secure_boot_api = (fp_sec_module_api_t)((uint64_t)ptr + SEC_MODULE_SHARED_SIZE);
+		return ret;
+
+	case SEC_KEYRING_ID:
+
+		/* Load the key ring and initialize Security Module. */
+		if (NULL == secure_boot_arg) {
+			ERROR("Security Module is not loaded.\n");
+			return -1;
+		}
+
+		secure_boot_arg->cmd = CMD_RESET_INIT;
+		secure_boot_arg->len = sizeof(st_reset_init_t);
+		(secure_boot_arg->prm).reset_init.inst_area = (uint64_t) ptr;
+		break;
+
+	case BL31_IMAGE_ID:
+	case BL32_IMAGE_ID:
+	case BL33_IMAGE_ID:
+
+		/* Authenticate the loaded program with Security Module. */
+		if (NULL == secure_boot_arg) {
+			ERROR("Security Module is not loaded.\n");
+			return -1;
+		}
+
+        /* The authentication length is placed in the header of the program to be authenticated. */
+		auth_len = *(uint64_t *)ptr;
+		if (len < auth_len) {
+			ERROR("The verification size is larger than the load image size.\n");
+			return -1;
+		}
+
+		secure_boot_arg->cmd = CMD_VERIFY_DATA;
+		secure_boot_arg->len = sizeof(st_verify_data_t);
+		(secure_boot_arg->prm).verify_data.len  = auth_len;
+		(secure_boot_arg->prm).verify_data.src  = (uint64_t)ptr + sizeof(uint64_t);
+		(secure_boot_arg->prm).verify_data.dst  = (uint64_t)ptr;
+		(secure_boot_arg->prm).verify_data.heap = (uint64_t)SEC_MODULE_HEAP;
+		break;
+
 	default:
+		ERROR("Unknown image id = %d\n", img_id);
 		return -1;
 	}
+
+#if RZG_BL2_DCACHE == 1
+	/* clean and disable */
+	write_sctlr_el3(read_sctlr_el3() & ~SCTLR_C_BIT);
+	dcsw_op_all(DCCISW);
+#endif
+
+	/* Call Security Module */
+	if(SEC_MODULE_RET_OK != secure_boot_api())
+	{
+		ERROR("Verification Failed for image id = %d\n", img_id);
+		ret = -1;
+	}
+	else
+	{
+		NOTICE("Verification Successful for image id = %d\n", img_id);
+	}
+
+#if RZG_BL2_DCACHE == 1
+	/* enable */
+	write_sctlr_el3(read_sctlr_el3() | SCTLR_C_BIT);
+#endif
+
 #endif
 	return ret;
 }
@@ -60,9 +183,10 @@ void auth_mod_init(void)
 {
 #if RZG2_SECURE_BOOT
 	NOTICE("BL2: Secure boot\n");
-	secure_boot_api = &normal_boot_verify;
+	secure_boot_api = (fp_sec_module_api_t)&normal_boot_verify;
+	secure_boot_arg = NULL;
 #else
 	NOTICE("BL2: Normal boot\n");
-	secure_boot_api = &normal_boot_verify;
+	secure_boot_api = (fp_sec_module_api_t)&normal_boot_verify;
 #endif
 }
diff --git a/drivers/renesas/rzg/io/io_rzg.c b/drivers/renesas/rzg/io/io_rzg.c
index 91c2e66..b08aba4 100644
--- a/drivers/renesas/rzg/io/io_rzg.c
+++ b/drivers/renesas/rzg/io/io_rzg.c
@@ -79,13 +79,16 @@ typedef struct {
 #define RZG_FLASH_CERT_HEADER		RZG_GET_FLASH_ADR(6U, 0U)
 #define RZG_EMMC_CERT_HEADER		(0x00030000U)
 
-#define RZG_COUNT_LOAD_BL31		(0U)
-#define RZG_COUNT_LOAD_BL33		(2U)
+#define RZG_COUNT_LOAD_BL31		(2U)
+#define RZG_COUNT_LOAD_BL33		(4U)
 
 #define RZG_MAX_LOAD_IMAGE		(RZG_MAX_BL3X_IMAGE + RZG_COUNT_LOAD_BL33)
 
 static const plat_rzg_name_offset_t name_offset[] = {
 
+	{SEC_MODULE_ID,  0U, RZG_ATTR_SET_ALL(0, 0, 0)},
+	{SEC_KEYRING_ID, 0U, RZG_ATTR_SET_ALL(1, 0, 1)},
+
 	{BL31_IMAGE_ID, 0U, RZG_ATTR_SET_ALL(RZG_COUNT_LOAD_BL31,    0, RZG_COUNT_LOAD_BL31)  },
 
 	/* BL3-2 is optional in the platform */
diff --git a/plat/renesas/rzg/bl2_plat_mem_params_desc.c b/plat/renesas/rzg/bl2_plat_mem_params_desc.c
index 9bd058c..b500f54 100644
--- a/plat/renesas/rzg/bl2_plat_mem_params_desc.c
+++ b/plat/renesas/rzg/bl2_plat_mem_params_desc.c
@@ -24,6 +24,37 @@
 extern uint64_t fdt_blob[PAGE_SIZE_4KB / sizeof(uint64_t)];
 
 static bl_mem_params_node_t bl2_mem_params_descs[] = {
+#if RZG2_SECURE_BOOT
+	{
+		.image_id = SEC_MODULE_ID,
+
+		SET_STATIC_PARAM_HEAD(ep_info, PARAM_EP, VERSION_2,
+		entry_point_info_t, SECURE | NON_EXECUTABLE),
+
+		SET_STATIC_PARAM_HEAD(image_info, PARAM_IMAGE_BINARY, VERSION_2,
+		image_info_t, 0),
+
+		.image_info.image_base = SEC_MODULE_BASE,
+		.image_info.image_max_size = SEC_MODULE_LIMIT - SEC_MODULE_BASE,
+
+		.next_handoff_image_id = INVALID_IMAGE_ID,
+	},
+	{
+		.image_id = SEC_KEYRING_ID,
+
+		SET_STATIC_PARAM_HEAD(ep_info, PARAM_EP, VERSION_2,
+		entry_point_info_t, SECURE | NON_EXECUTABLE),
+
+		SET_STATIC_PARAM_HEAD(image_info, PARAM_IMAGE_BINARY, VERSION_2,
+		image_info_t, 0),
+
+		.image_info.image_base = SEC_KEYRING_BASE,
+		.image_info.image_max_size = SEC_KEYRING_LIMIT - SEC_KEYRING_BASE,
+
+		.next_handoff_image_id = INVALID_IMAGE_ID,
+	},
+#endif
+
 	{
 		.image_id = BL31_IMAGE_ID,
 
diff --git a/plat/renesas/rzg/include/platform_def.h b/plat/renesas/rzg/include/platform_def.h
old mode 100644
new mode 100755
index 5997803..ef34eb9
--- a/plat/renesas/rzg/include/platform_def.h
+++ b/plat/renesas/rzg/include/platform_def.h
@@ -68,6 +68,8 @@
 #define BL336_CERT_ID		(NS_BL2U_IMAGE_ID + 19)
 #define BL337_CERT_ID		(NS_BL2U_IMAGE_ID + 20)
 #define BL338_CERT_ID		(NS_BL2U_IMAGE_ID + 21)
+#define SEC_MODULE_ID		(NS_BL2U_IMAGE_ID + 22)
+#define SEC_KEYRING_ID		(NS_BL2U_IMAGE_ID + 23)
 
 /* io drivers id */
 #define FLASH_DEV_ID		U(0)
@@ -145,6 +147,16 @@
  ******************************************************************************/
 #define BL33_BASE		DRAM1_NS_BASE
 
+/*******************************************************************************
+ * Security Module for Authentication
+ ******************************************************************************/
+#define SEC_MODULE_BASE		(RZG_AUTH_MOD_BASE)
+#define SEC_MODULE_LIMIT	(SEC_MODULE_BASE + 0x1E000)
+
+#define SEC_KEYRING_BASE	(SEC_MODULE_LIMIT)
+#define SEC_KEYRING_LIMIT	(RZG_AUTH_MOD_BASE + RZG_AUTH_MOD_SIZE)
+
+#define SEC_MODULE_HEAP		U(0x50100000)
 
 /*******************************************************************************
  * Platform specific page table and MMU setup constants
diff --git a/plat/renesas/rzg/include/rzg_def.h b/plat/renesas/rzg/include/rzg_def.h
old mode 100644
new mode 100755
index 278efbf..d8316ca
--- a/plat/renesas/rzg/include/rzg_def.h
+++ b/plat/renesas/rzg/include/rzg_def.h
@@ -40,6 +40,9 @@
 #define	DRAM_PROTECTED_SIZE		ULL(0x03F00000)
 #define	RZG_BL31_CRASH_BASE		U(0x4403F000)
 #define	RZG_BL31_CRASH_SIZE		U(0x00001000)
+#define RZG_AUTH_MOD_BASE		U(0x440E0000)
+#define RZG_AUTH_MOD_SIZE		U(0x00020000)
+
 /* Entrypoint mailboxes */
 #define MBOX_BASE			RZG_SHARED_MEM_BASE
 #define MBOX_SIZE			0x200
diff --git a/plat/renesas/rzg/plat_storage.c b/plat/renesas/rzg/plat_storage.c
index 4c17dc6..dd2bbe2 100644
--- a/plat/renesas/rzg/plat_storage.c
+++ b/plat/renesas/rzg/plat_storage.c
@@ -74,6 +74,15 @@ static const io_block_spec_t bl338_file_spec = {
 	.offset = BL338_IMAGE_ID,
 };
 
+#if RZG2_SECURE_BOOT
+static const io_block_spec_t secmod_file_spec = {
+	.offset = SEC_MODULE_ID,
+};
+
+static const io_block_spec_t seckey_file_spec = {
+	.offset = SEC_KEYRING_ID,
+};
+#endif
 
 static int32_t open_emmcdrv(const uintptr_t spec);
 static int32_t open_memmap(const uintptr_t spec);
@@ -134,6 +143,16 @@ static const struct plat_io_policy policies[] = {
 			    &rzg_dev_handle,
 			    (uintptr_t) &bl338_file_spec,
 			    &open_rzg},
+#if RZG2_SECURE_BOOT
+	[SEC_MODULE_ID] = {
+			    &rzg_dev_handle,
+			    (uintptr_t) &secmod_file_spec,
+			    &open_rzg},
+	[SEC_KEYRING_ID] = {
+			    &rzg_dev_handle,
+			    (uintptr_t) &seckey_file_spec,
+			    &open_rzg},
+#endif
 			{
 			    0, 0, 0
 			}
diff --git a/plat/renesas/rzg/platform.mk b/plat/renesas/rzg/platform.mk
old mode 100644
new mode 100755
index 8834492..d7b996f
--- a/plat/renesas/rzg/platform.mk
+++ b/plat/renesas/rzg/platform.mk
@@ -416,3 +416,4 @@ rzg_srecord: $(BL2_ELF_SRC) $(BL31_ELF_SRC)
 	$(Q)$(OC) -O srec --srec-forceS3 ${BL2_ELF_SRC}  ${SREC_PATH}/bl2.srec
 	@echo "generating srec: ${SREC_PATH}/bl31.srec"
 	$(Q)$(OC) -O srec --srec-forceS3 ${BL31_ELF_SRC} ${SREC_PATH}/bl31.srec
+
diff --git a/tools/renesas/rzg_layout_create/makefile b/tools/renesas/rzg_layout_create/makefile
old mode 100644
new mode 100755
diff --git a/tools/renesas/rzg_layout_create/sa6.c b/tools/renesas/rzg_layout_create/sa6.c
old mode 100644
new mode 100755
index 2d6c5c6..82b3e2a
--- a/tools/renesas/rzg_layout_create/sa6.c
+++ b/tools/renesas/rzg_layout_create/sa6.c
@@ -13,6 +13,14 @@
 
 /* Number of content cert for Non-secure Target Program(BL33x) */
 #define RZG_IMAGE_NUM			(0x00000001U)
+/* Source address on Security Module */
+#define SEC_MODSRC_ADDRESS		(0x00400000U)
+/* Reserved */
+#define SEC_MOD_PARTITION		(0x00000000U)
+/* Source address on Trusted Keyring */
+#define SEC_KEYSRC_ADDRESS		(0x00500000U)
+/* Reserved */
+#define SEC_KEY_PARTITION		(0x00000000U)
 /* Source address on flash for BL31 */
 #define RZG_BL31SRC_ADDRESS		(0x001C0000U)
 /* Reserved */
@@ -87,6 +95,17 @@
 
 #endif /* RZG_SA6_TYPE == RZG_SA6_TYPE_HYPERFLASH */
 
+/* Destination address for Security Module */
+#define SEC_MODDST_ADDRESS		(0x440E0000U)
+#define SEC_MODDST_ADDRESSH		(0x00000000U)
+/* Destination size for Security Module */
+#define SEC_MODDST_SIZE			(0x00007800U)
+/* Destination address for Secure Keys */
+#define SEC_KEYDST_ADDRESS		(0x440FE000U)
+#define SEC_KEYDST_ADDRESSH		(0x00000000U)
+/* Destination size for Secure Keys */
+#define SEC_KEYDST_SIZE			(0x00000400U)
+
 /* Destination address for BL31 */
 #define RZG_BL31DST_ADDRESS		(0x44000000U)
 #define RZG_BL31DST_ADDRESSH		(0x00000000U)
@@ -133,6 +152,10 @@
 
 /* SA6 */
 const uint64_t __attribute__ ((section (".sa6_image_num")))	image_num	= RZG_IMAGE_NUM;
+const uint64_t __attribute__ ((section (".sa6_secmodsrc_addr"))) secmodsrc_addr = SEC_MODSRC_ADDRESS;
+const uint64_t __attribute__ ((section (".sa6_secmodpartition")))secmodpartition = SEC_MOD_PARTITION;
+const uint64_t __attribute__ ((section (".sa6_seckeysrc_addr"))) seckeysrc_addr = SEC_KEYSRC_ADDRESS;
+const uint64_t __attribute__ ((section (".sa6_seckeypartition")))seckeypartition= SEC_KEY_PARTITION;
 const uint64_t __attribute__ ((section (".sa6_bl31src_addr")))	bl31src_addr	= RZG_BL31SRC_ADDRESS;
 const uint64_t __attribute__ ((section (".sa6_bl31partition")))	bl31partition	= RZG_BL31_PARTITION;
 const uint64_t __attribute__ ((section (".sa6_bl32src_addr")))	bl32src_addr	= RZG_BL32SRC_ADDRESS;
@@ -153,6 +176,12 @@ const uint64_t __attribute__ ((section (".sa6_bl337src_addr")))	bl337src_addr	=
 const uint64_t __attribute__ ((section (".sa6_bl337partition")))bl337partition	= RZG_BL337_PARTITION;
 const uint64_t __attribute__ ((section (".sa6_bl338src_addr")))	bl338src_addr	= RZG_BL338SRC_ADDRESS;
 const uint64_t __attribute__ ((section (".sa6_bl338partition")))bl338partition	= RZG_BL338_PARTITION;
+const uint32_t __attribute__ ((section (".sa6_secmoddst_addr"))) secmoddst_addr = SEC_MODDST_ADDRESS;
+const uint32_t __attribute__ ((section (".sa6_secmoddst_addrh")))secmoddst_addrh= SEC_MODDST_ADDRESSH;
+const uint32_t __attribute__ ((section (".sa6_secmoddst_size"))) secmoddst_size = SEC_MODDST_SIZE;
+const uint32_t __attribute__ ((section (".sa6_seckeydst_addr"))) seckeydst_addr = SEC_KEYDST_ADDRESS;
+const uint32_t __attribute__ ((section (".sa6_seckeydst_addrh")))seckeydst_addrh= SEC_KEYDST_ADDRESSH;
+const uint32_t __attribute__ ((section (".sa6_seckeydst_size"))) seckeydst_size = SEC_KEYDST_SIZE;
 const uint32_t __attribute__ ((section (".sa6_bl31dst_addr")))	bl31dst_addr	= RZG_BL31DST_ADDRESS;
 const uint32_t __attribute__ ((section (".sa6_bl31dst_addrh")))	bl31dst_addrh	= RZG_BL31DST_ADDRESSH;
 const uint32_t __attribute__ ((section (".sa6_bl31dst_size")))	bl31dst_size	= RZG_BL31DST_SIZE;
diff --git a/tools/renesas/rzg_layout_create/sa6.ld.S b/tools/renesas/rzg_layout_create/sa6.ld.S
index 29bbbac..efe5539 100644
--- a/tools/renesas/rzg_layout_create/sa6.ld.S
+++ b/tools/renesas/rzg_layout_create/sa6.ld.S
@@ -12,6 +12,17 @@ SECTIONS
 		. = 0x00000008;
 	}
 
+	.src_addr_sec : {
+		KEEP(*(.sa6_secmodsrc_addr))
+		. = 0x00000008;
+		KEEP(*(.sa6_secmodpartition))
+		. = 0x000000010;
+		KEEP(*(.sa6_seckeysrc_addr))
+		. = 0x000000018;
+		KEEP(*(.sa6_seckeypartition))
+		. = 0x00000020;
+	}
+
 	.src_addr : {
 		KEEP(*(.sa6_bl31src_addr))
 		. = 0x00000008;
@@ -56,6 +67,21 @@ SECTIONS
 
 	. = 0x00000554;
 
+	.dst_addr_sec : {
+		KEEP(*(.sa6_secmoddst_addr))
+		. = 0x00000004;
+		KEEP(*(.sa6_secmoddst_addrh))
+		. = 0x00000110;
+		KEEP(*(.sa6_secmoddst_size))
+		. = 0x00000800;
+		KEEP(*(.sa6_seckeydst_addr))
+		. = 0x00000804;
+		KEEP(*(.sa6_seckeydst_addrh))
+		. = 0x00000910;
+		KEEP(*(.sa6_seckeydst_size))
+		. = 0x00001000;
+	}
+
 	.dst_addr : {
 		KEEP(*(.sa6_bl31dst_addr))
 		. = 0x00000004;
-- 
2.7.4
